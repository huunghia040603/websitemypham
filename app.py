from flask import Flask, render_template, request, jsonify, redirect, url_for, send_file, session
import os
from datetime import datetime, timedelta
import secrets
import cloudinary
import cloudinary.uploader
import time
import smtplib
import base64
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from io import BytesIO
import requests
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

app = Flask(__name__)
app.secret_key = 'buddyskincare_secret_key_2024'
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SECURE'] = False  # Set to True in production with HTTPS
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'

# Add timestamp helper for cache busting
@app.template_global()
def timestamp():
    return int(time.time())

# API URL for PythonAnywhere
API_BASE_URL = 'https://buddyskincare.vn/backend/api'

# Cache for products
products_cache = {
    'data': None,
    'timestamp': 0,
    'ttl': 300  # 5 minutes
}

# Cloudinary configuration
cloudinary.config(
    cloud_name="deoknys7k",
    api_key="657643869681298",
    api_secret="K8pAAJPmIUcO7ThRnfOtJx7Ntwg"
)

# D·ªØ li·ªáu danh m·ª•c
categories_data = [
    {'name': 'ChƒÉm S√≥c Da', 'icon': 'fas fa-spa', 'color': 'text-success', 'count': 80},
    {'name': 'Son M√¥i', 'icon': 'fas fa-lipstick', 'color': 'text-danger', 'count': 50},
    {'name': 'Kem N·ªÅn', 'icon': 'fas fa-palette', 'color': 'text-primary', 'count': 30},
    {'name': 'Trang ƒêi·ªÉm M·∫Øt', 'icon': 'fas fa-eye', 'color': 'text-warning', 'count': 40},
    {'name': 'ChƒÉm S√≥c C∆° Th·ªÉ', 'icon': 'fas fa-spa', 'color': 'text-info', 'count': 35},
    {'name': 'N∆∞·ªõc Hoa', 'icon': 'fas fa-spray-can', 'color': 'text-secondary', 'count': 25}
]

# Context processor ƒë·ªÉ t·∫°o CSRF token cho templates
@app.context_processor
def inject_csrf_token():
    if 'csrf_token' not in session:
        session['csrf_token'] = secrets.token_hex(16)
    return dict(csrf_token=session['csrf_token'])

# D·ªØ li·ªáu th∆∞∆°ng hi·ªáu
brands_data = [
    'Bioderma', 'Cetaphil', 'Chanel', 'Dior', 'Estee Lauder',
    'L\'Oreal Paris', 'Mac Cosmetics', 'SK-II', 'The Ordinary', 'TheFaceShop'
]

# D·ªØ li·ªáu ƒë√°nh gi√°
reviews_data = [
    {
        'id': 1,
        'product_id': 1,
        'user_name': 'Nguy·ªÖn Th·ªã Anh',
        'rating': 5,
        'comment': 'Combo n∆∞·ªõc c√¢n b·∫±ng sen h·∫≠u giang r·∫•t t·ªët! Da m√¨nh s·∫°ch v√† m·ªÅm m·∫°i h∆°n h·∫≥n. M√πi h∆∞∆°ng d·ªÖ ch·ªãu, kh√¥ng g√¢y k√≠ch ·ª©ng. S·∫Ω mua l·∫°i!',
        'date': '2024-01-15',
        'images': ['https://via.placeholder.com/80x80/ff6b6b/ffffff?text=IMG', 'https://via.placeholder.com/80x80/ff8e8e/ffffff?text=IMG']
    },
    {
        'id': 2,
        'product_id': 1,
        'user_name': 'Tr·∫ßn VƒÉn B√¨nh',
        'rating': 5,
        'comment': 'Mua t·∫∑ng v·ª£, c√¥ ·∫•y r·∫•t th√≠ch! S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω. Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n.',
        'date': '2024-01-10'
    },
    {
        'id': 3,
        'product_id': 2,
        'user_name': 'L√™ Th·ªã C·∫©m',
        'rating': 5,
        'comment': 'Kem n·ªÅn ch·∫•t l∆∞·ª£ng t·ªët, che ph·ªß ho√†n h·∫£o. Kh√¥ng g√¢y m·ª•n v√† ƒë·ªô b·ªÅn cao. R·∫•t h√†i l√≤ng!',
        'date': '2024-01-12'
    }
]

# D·ªØ li·ªáu testimonials
testimonials_data = [
    {
        'name': 'Nguy·ªÖn Th·ªã Anh',
        'rating': 5,
        'comment': 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω. Giao h√†ng nhanh v√† ƒë√≥ng g√≥i c·∫©n th·∫≠n. S·∫Ω mua l·∫°i!',
        'avatar': 'https://via.placeholder.com/80x80/ff6b6b/ffffff?text=KH'
    },
    {
        'name': 'Tr·∫ßn VƒÉn B√¨nh',
        'rating': 5,
        'comment': 'Mua son Mac v·ªõi gi√° r·∫ª h∆°n 50% so v·ªõi gi√° g·ªëc. Ch·∫•t l∆∞·ª£ng v·∫´n t·ªët nh∆∞ m·ªõi. R·∫•t h√†i l√≤ng!',
        'avatar': 'https://via.placeholder.com/80x80/4ecdc4/ffffff?text=KH'
    },
    {
        'name': 'L√™ Th·ªã C·∫©m',
        'rating': 4,
        'comment': 'Website d·ªÖ s·ª≠ d·ª•ng, thanh to√°n thu·∫≠n ti·ªán. S·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£. ƒê√°ng tin c·∫≠y!',
        'avatar': 'https://via.placeholder.com/80x80/45b7d1/ffffff?text=KH'
    }
]

# Helper to get products with cache
def get_products_with_cache():
    """Get products from cache or API"""
    current_time = time.time()

    # Check if cache is valid
    if (products_cache['data'] is not None and
        current_time - products_cache['timestamp'] < products_cache['ttl']):
        print("üì¶ Using cached products")
        return products_cache['data']

    # Fetch from API with shorter timeout
    try:
        import requests
        api_url = f'{API_BASE_URL}/products/'
        response = requests.get(api_url, timeout=5)  # Shorter timeout

        if response.status_code == 200:
            products = response.json()
            # Update cache
            products_cache['data'] = products
            products_cache['timestamp'] = current_time
            print(f"‚úÖ Fetched {len(products)} products from API and cached")
            return products
        else:
            print(f"‚ùå API returned status {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Error fetching products: {e}")
        # Return empty list if API fails
        return []

# Helper to classify product condition based on status keyword

def _is_new_status(status: str) -> bool:
    try:
        if not status:
            return False
        s = str(status).lower()
        return ('new' in s) or ('chiet' in s)
    except Exception:
        return False

def _extract_category_name(product: dict) -> str:
    try:
        if not isinstance(product, dict):
            return ''
        cat = product.get('category')
        if isinstance(cat, dict):
            return (cat.get('name') or cat.get('title') or '').strip()
        # Fallbacks if API provides flat fields
        return (product.get('category_name') or product.get('category') or '').strip()
    except Exception:
        return ''

@app.route('/')
def index():
    """Trang ch·ªß"""
    # Use cached products
    all_products = get_products_with_cache()

    # Filter flash sale products (c√≥ discount > 0)
    flash_sale_products = [p for p in all_products if float(p.get('discount_rate', 0)) > 0][:4]

    # Filter featured products (kh√¥ng c√≥ discount ho·∫∑c discount th·∫•p)
    featured_products = [p for p in all_products if float(p.get('discount_rate', 0)) <= 10][:4]

    # T√≠nh th·ªùi gian flash sale (2 ng√†y t·ª´ hi·ªán t·∫°i)
    flash_sale_end = datetime.now() + timedelta(days=2, hours=15, minutes=30, seconds=45)

    return render_template('index.html',
                         categories=categories_data,
                         flash_sale_products=flash_sale_products,
                         featured_products=featured_products,
                         testimonials=testimonials_data,
                         flash_sale_end=flash_sale_end)

@app.route('/api/filters/data')
def api_filters_data():
    """API endpoint ƒë·ªÉ l·∫•y d·ªØ li·ªáu filters (danh m·ª•c, th∆∞∆°ng hi·ªáu, tags) - cache ƒë·ªÉ kh√¥ng load l·∫°i"""
    try:
        print(f"üîç Loading REAL filters data from {API_BASE_URL}")

        # Get categories
        try:
            categories_response = requests.get(f"{API_BASE_URL}/category/", timeout=10)
            print(f"üîç Categories response status: {categories_response.status_code}")
            categories = categories_response.json() if categories_response.status_code == 200 else []
            print(f"üîç Found {len(categories)} categories")
        except Exception as e:
            print(f"‚ùå Categories error: {e}")
            categories = []

        # Get brands
        try:
            brands_response = requests.get(f"{API_BASE_URL}/brands/", timeout=10)
            print(f"üîç Brands response status: {brands_response.status_code}")
            brands = brands_response.json() if brands_response.status_code == 200 else []
            print(f"üîç Found {len(brands)} brands")
        except Exception as e:
            print(f"‚ùå Brands error: {e}")
            brands = []

        # Get products for tags (only get first page to avoid timeout)
        try:
            products_response = requests.get(f"{API_BASE_URL}/products/?page=1&per_page=48", timeout=10)
            print(f"üîç Products response status: {products_response.status_code}")
            products = products_response.json().get('results', []) if products_response.status_code == 200 else []
            print(f"üîç Found {len(products)} products for tags")
        except Exception as e:
            print(f"‚ùå Products error: {e}")
            products = []

        # Get tags from products
        all_tags = set()
        for product in products:
            tags = product.get('tags', [])
            if isinstance(tags, list):
                for tag in tags:
                    if isinstance(tag, str) and tag.strip():
                        all_tags.add(tag.strip())
                    elif isinstance(tag, dict) and tag.get('name'):
                        all_tags.add(tag['name'].strip())

        tags_with_stock = sorted(list(all_tags))
        print(f"üîç Found {len(tags_with_stock)} tags")

        result = {
            'categories': categories,
            'brands': brands,
            'tags': tags_with_stock
        }

        print(f"‚úÖ Returning REAL filters data: {len(result['categories'])} categories, {len(result['brands'])} brands, {len(result['tags'])} tags")
        return jsonify(result)

    except Exception as e:
        print(f"‚ùå Error in api_filters_data: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': 'L·ªói server'}), 500

@app.route('/api/products/filtered')
def api_products_filtered():
    """API endpoint ƒë·ªÉ l·∫•y s·∫£n ph·∫©m ƒë√£ l·ªçc m√† kh√¥ng c·∫ßn reload trang"""
    try:
        # Get filter parameters
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 48, type=int)
        search_query = request.args.get('search', '').strip()
        category_name = request.args.get('category_name', '').strip()
        brands_name = request.args.get('brands_name', '').strip()
        tags = request.args.get('tags', '').strip()
        condition = request.args.get('condition', '').strip()
        price_range = request.args.get('price_range', '').strip()
        discount_range = request.args.get('discount_range', '').strip()
        sort_by = request.args.get('sort', 'newest')

        print(f"üîç Filtering products with: page={page}, per_page={per_page}, search='{search_query}', category='{category_name}', brand='{brands_name}', tags='{tags}', condition='{condition}', price='{price_range}', discount='{discount_range}', sort='{sort_by}'")

        # Build API URL with filters
        api_params = {
            'page': page,
            'per_page': per_page
        }

        # Add ordering
        if sort_by == 'newest':
            api_params['ordering'] = '-id'
        elif sort_by == 'price_asc':
            api_params['ordering'] = 'discounted_price'
        elif sort_by == 'price_desc':
            api_params['ordering'] = '-discounted_price'
        elif sort_by == 'sales':
            api_params['ordering'] = '-sold_quantity'
        elif sort_by == 'discount':
            api_params['ordering'] = '-discount_rate'

        if search_query:
            api_params['search'] = search_query
        if category_name:
            api_params['category_name'] = category_name
        if brands_name:
            api_params['brands_name'] = brands_name
        if tags:
            api_params['tags'] = tags
        if condition and condition != 'all':
            api_params['condition'] = condition

        # Get products from Django API
        api_url = f"{API_BASE_URL}/products/"
        print(f"üîç Fetching from: {api_url} with params: {api_params}")
        response = requests.get(api_url, params=api_params, timeout=30)

        if response.status_code != 200:
            print(f"‚ùå API Error: {response.status_code} - {response.text}")
            return jsonify({'error': 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m'}), 500

        data = response.json()
        print(f"üîç Got {len(data.get('results', []))} products from API")

        # Apply client-side filters for price and discount
        filtered_products = data.get('results', [])

        # Price filter (VND)
        if price_range:
            print(f"üîç DEBUG: Price range filter: {price_range}")
            print(f"üîç DEBUG: Total products before filter: {len(filtered_products)}")
            def price_vnd(x):
                return (x.get('discounted_price', 0) or 0) * 1000
            if price_range == 'under_200k':
                filtered_products = [p for p in filtered_products if price_vnd(p) < 200_000]
                print(f"üîç DEBUG: Products under 200k: {len(filtered_products)}")
            elif price_range == '200_500':
                filtered_products = [p for p in filtered_products if 200_000 <= price_vnd(p) < 500_000]
            elif price_range == '500_1m':
                filtered_products = [p for p in filtered_products if 500_000 <= price_vnd(p) < 1_000_000]
            elif price_range == 'over_1m':
                filtered_products = [p for p in filtered_products if price_vnd(p) >= 1_000_000]

        # Discount filter
        if discount_range:
            def discount_rate(p):
                return float(p.get('discount_rate', 0) or 0)
            if discount_range == 'under_30':
                filtered_products = [p for p in filtered_products if discount_rate(p) < 30]
            elif discount_range == '50_70':
                filtered_products = [p for p in filtered_products if 50 <= discount_rate(p) < 70]
            elif discount_range == 'over_70':
                filtered_products = [p for p in filtered_products if discount_rate(p) >= 70]

        # Update data with filtered results
        data['results'] = filtered_products
        data['count'] = len(filtered_products)

        print(f"‚úÖ Returning REAL products data: {len(filtered_products)} products")
        return jsonify(data)

    except Exception as e:
        print(f"‚ùå Error in api_products_filtered: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': 'L·ªói server'}), 500

@app.route('/products')
def products():
    """Trang danh s√°ch s·∫£n ph·∫©m"""
    # Use cached products
    all_products = get_products_with_cache()

    # L·∫•y tham s·ªë filter
    category = request.args.get('category')
    brand = request.args.get('brand')
    price_range = request.args.get('price')
    discount = request.args.get('discount')
    sort_by = request.args.get('sort', 'newest')
    condition = request.args.get('condition', 'all')

    # H·ªó tr·ª£ t√™n tham s·ªë m·ªõi theo y√™u c·∫ßu - h·ªó tr·ª£ multiple values
    category_names = request.args.getlist('category_name') or ([category] if category else [])
    brands_names = request.args.getlist('brands_name') or ([brand] if brand else [])
    new_price_range = request.args.get('price_range') or price_range
    new_discount = request.args.get('discount_range') or discount
    tags_filter = request.args.get('tags')

    # Filter s·∫£n ph·∫©m
    filtered_products = all_products.copy()

    # Filter by multiple categories
    if category_names:
        category_targets = [name.strip().lower() for name in category_names if name.strip()]
        if category_targets:
            filtered_products = [p for p in filtered_products if _extract_category_name(p).lower() in category_targets]

    # Filter by multiple brands
    if brands_names:
        brand_targets = [name.strip() for name in brands_names if name.strip()]
        if brand_targets:
            filtered_products = [p for p in filtered_products if (p.get('brand_name') or (p.get('brand') or {}).get('name') or '').strip() in brand_targets]

    if condition != 'all':
        filtered_products = [p for p in filtered_products if p.get('status') == condition]

    # Filter by tags
    if tags_filter:
        def has_tag(product, target_tag):
            try:
                tags = product.get('tags', [])
                if not isinstance(tags, list):
                    return False
                return any(
                    (isinstance(t, str) and t.lower() == target_tag.lower()) or
                    (isinstance(t, dict) and t.get('name', '').lower() == target_tag.lower())
                    for t in tags
                )
            except Exception:
                return False

        filtered_products = [p for p in filtered_products if has_tag(p, tags_filter)]

    # Kho·∫£ng gi√° m·ªõi (VND)
    if new_price_range:
        print(f"üîç DEBUG: Price range filter: {new_price_range}")
        print(f"üîç DEBUG: Total products before filter: {len(filtered_products)}")
        def price_vnd(x):
            return (x.get('discounted_price', 0) or 0) * 1000
        if new_price_range == 'under_200k':
            filtered_products = [p for p in filtered_products if price_vnd(p) < 200_000]
            print(f"üîç DEBUG: Products under 200k: {len(filtered_products)}")
        elif new_price_range == '200_500':
            filtered_products = [p for p in filtered_products if 200_000 <= price_vnd(p) < 500_000]
        elif new_price_range == '500_1m':
            filtered_products = [p for p in filtered_products if 500_000 <= price_vnd(p) < 1_000_000]
        elif new_price_range == 'over_1m':
            filtered_products = [p for p in filtered_products if price_vnd(p) >= 1_000_000]
        # Gi·ªØ t∆∞∆°ng th√≠ch c≈©
        elif new_price_range == 'under_500k':
            filtered_products = [p for p in filtered_products if price_vnd(p) < 500_000]
        elif new_price_range == '500k_1m':
            filtered_products = [p for p in filtered_products if 500_000 <= price_vnd(p) < 1_000_000]
        elif new_price_range == '1m_2m':
            filtered_products = [p for p in filtered_products if 1_000_000 <= price_vnd(p) < 2_000_000]
        elif new_price_range == 'over_2m':
            filtered_products = [p for p in filtered_products if price_vnd(p) >= 2_000_000]

    # Gi·∫£m gi√° m·ªõi
    if new_discount:
        def rate(x):
            try:
                return float(x.get('discount_rate', 0) or 0)
            except Exception:
                return 0.0
        if new_discount == 'under_30':
            filtered_products = [p for p in filtered_products if rate(p) < 30]
        elif new_discount == '50_70':
            filtered_products = [p for p in filtered_products if 50 <= rate(p) <= 70]
        elif new_discount == 'over_70':
            filtered_products = [p for p in filtered_products if rate(p) > 70]
        # Gi·ªØ t∆∞∆°ng th√≠ch c≈©
        elif new_discount == 'over_50':
            filtered_products = [p for p in filtered_products if rate(p) >= 50]
        elif new_discount == '30_50':
            filtered_products = [p for p in filtered_products if 30 <= rate(p) < 50]
        elif new_discount == 'under_30_old':
            filtered_products = [p for p in filtered_products if rate(p) < 30]

    # Sort s·∫£n ph·∫©m
    if sort_by == 'price_low':
        filtered_products.sort(key=lambda x: x.get('discounted_price', 0) * 1000)
    elif sort_by == 'price_high':
        filtered_products.sort(key=lambda x: x.get('discounted_price', 0) * 1000, reverse=True)
    elif sort_by == 'popular':
        filtered_products.sort(key=lambda x: x.get('sold_quantity', 0), reverse=True)
    elif sort_by == 'discount':
        filtered_products.sort(key=lambda x: float(x.get('discount_rate', 0)), reverse=True)
    else:  # newest
        filtered_products.sort(key=lambda x: x.get('id', 0), reverse=True)

    # Pagination logic
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 48, type=int)

    # Calculate pagination
    total_products = len(filtered_products)
    total_pages = (total_products + per_page - 1) // per_page

    # Get products for current page
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    paginated_products = filtered_products[start_idx:end_idx]

    # Check if this is an AJAX request
    is_ajax = request.args.get('ajax') == '1'

    if is_ajax:
        # Return only the products grid HTML for AJAX requests
        from flask import render_template_string
        return render_template_string('''
            <div id="products-page-grid" class="row g-4">
                {% for product in products %}
                <div class="col-6 col-md-4 col-lg-3">
                    {% set image_url = product.image or '/static/image/default-product.jpg' %}
                    {% set brand_name = product.brand_name or 'Kh√¥ng r√µ' %}
                    {% set status_text = (product.status or '').lower() %}
                    {% set is_new_by_status = 'new' in status_text or 'chiet' in status_text %}
                    {% set remaining_percent = None %}
                    {% if not is_new_by_status %}
                        {% set remaining_percent = None %}
                    {% endif %}
                    {% set used_label = None %}
                    {% if not is_new_by_status %}
                        {% if 'test' in status_text %}
                            {% set used_label = 'Test 1-2 l·∫ßn' %}
                        {% elif remaining_percent %}
                            {% set used_label = 'C√≤n ' + remaining_percent + '%' %}
                        {% endif %}
                    {% endif %}
                    {% set new_label = None %}
                    {% if is_new_by_status %}
                        {% if 'chiet' in status_text %}
                            {% set new_label = 'Chi·∫øt' %}
                        {% elif status_text == 'new' %}
                            {% set new_label = 'New ƒë·∫πp' %}
                        {% elif 'newmh' in status_text %}
                            {% set new_label = 'New m·∫•t h·ªôp' %}
                        {% elif 'newm' in status_text %}
                            {% set new_label = 'New m√≥p h·ªôp' %}
                        {% elif 'newrt' in status_text %}
                            {% set new_label = 'New r√°ch tem' %}
                        {% elif 'newmn' in status_text %}
                            {% set new_label = 'New m√≥p nh·∫π' %}
                        {% elif 'newx' in status_text %}
                            {% set new_label = 'New x∆∞·ªõc nh·∫π' %}
                        {% elif 'newspx' in status_text %}
                            {% set new_label = 'New x∆∞·ªõc' %}
                        {% else %}
                            {% set new_label = 'New' %}
                        {% endif %}
                    {% endif %}
                    {% set info_label = new_label if is_new_by_status else used_label %}
                    {% set original_price = product.original_price * 1000 if product.original_price else None %}
                    {% set discounted_price = product.discounted_price * 1000 if product.discounted_price else 0 %}
                    {% set rating = product.rating | float if product.rating else 0 %}
                    {% set full_stars = rating | int %}
                    {% set has_half_star = (rating % 1) >= 0.5 and (rating % 1) < 1 %}
                    {% set discount_rate = (product.discount_rate | float | round | int) if product.discount_rate else 0 %}
                    {% set stock_quantity = product.stock_quantity or 0 %}
                    {% set is_out_of_stock = stock_quantity <= 0 %}

                    <div class="product-card card h-100 border-0 shadow-sm">
                        <div class="position-relative">
                            <a href="/product/{{ product.id }}" class="text-decoration-none">
                                <img src="{{ image_url }}"
                                     class="card-img-top" alt="{{ product.name }}"
                                     style="height: 220px; object-fit: cover;{% if is_out_of_stock %} filter: grayscale(100%);{% endif %}"
                                     onerror="this.src='/static/image/default-product.jpg'">
                            </a>
                            {% if is_out_of_stock %}
                            <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
                                 style="background-color: rgba(0,0,0,0.7); border-radius: 6px;">
                                <div class="text-center text-white">
                                    <i class="fas fa-times-circle fa-2x mb-1"></i>
                                    <h6 class="fw-bold mb-0">H·∫æT H√ÄNG</h6>
                                </div>
                            </div>
                            {% endif %}
                            <button class="fav-toggle position-absolute top-0 end-0 m-2"
                                    title="Th√™m v√†o y√™u th√≠ch"
                                    data-id="{{ product.id }}"
                                    data-name="{{ product.name }}"
                                    data-image="{{ image_url }}"
                                    data-brand="{{ brand_name }}"
                                    data-price="{{ discounted_price }}"
                                    style="border:none;background:transparent;cursor:pointer;">
                                <i class="far fa-heart" style="font-size: 18px; color:#fff; text-shadow: 0 1px 3px rgba(0,0,0,0.5);"></i>
                            </button>
                            <div class="position-absolute bottom-0 start-0 m-1">
                                <img src="/static/image/logo.png" alt="Logo" class="product-logo" style="width: 28px; height: 28px; object-fit: contain; border-radius: 50%; background: white; padding: 2px; display: block; z-index: 10; box-shadow: 0 1px 3px rgba(0,0,0,0.2);" onerror="this.style.display='none';">
                            </div>
                            <div class="product-badges-row position-absolute" style="top:8px;left:10px;display:flex;gap:6px;align-items:center;z-index:2;">
                                {% if discount_rate > 0 %}
                                <div class="badge bg-danger discount-badge-left" style="font-size: 11px; padding: 4px 8px;">-{{ discount_rate }}%</div>
                                {% endif %}
                                {% if info_label %}
                                <div class="product-info-badge" style="font-size: 10px; padding: 1px 6px; background:#eaf4ff; border:1px solid #b8d4ff; color:#1e56a0; border-radius:6px;"><i class="fas fa-circle-info me-1"></i>{{ info_label }}</div>
                                {% endif %}
                            </div>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title fw-bold" style="font-size: 12px; line-height: 1.3; display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden; height: 16px;">
                                <a href="/product/{{ product.id }}" class="text-decoration-none text-dark">{{ product.name }}</a>
                            </h6>
                            <p class="text-muted small mb-2" style="font-size: 10px;">{{ brand_name }}{% if info_label %} ‚Ä¢ {{ info_label }}{% endif %}</p>
                            <div class="d-flex align-items-center mb-1">
                                {% if original_price %}
                                <span class="text-decoration-line-through text-muted me-1" style="font-size: 11px;">{{ "{:,.0f}".format(original_price) }}ƒë</span>
                                {% endif %}
                                <span class="text-danger fw-bold" style="font-size: 15px;">{{ "{:,.0f}".format(discounted_price) }}ƒë</span>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <div class="stars text-warning me-2" style="font-size: 12px;">
                                    {% for i in range(5) %}
                                        {% if i < full_stars %}
                                        <i class="fas fa-star"></i>
                                        {% elif i == full_stars and has_half_star %}
                                        <i class="fas fa-star-half-alt"></i>
                                        {% else %}
                                        <i class="far fa-star"></i>
                                        {% endif %}
                                    {% endfor %}
                                </div>
                                <small class="text-muted" style="font-size: 11px;">({{ rating }})</small>
                                <span class="badge {% if is_out_of_stock %}bg-danger{% else %}bg-success{% endif %}" style="font-size: 10px; padding: 4px 8px; margin-left: 10px;">{% if is_out_of_stock %}H·∫øt h√†ng{% else %}C√≤n {{ stock_quantity }}{% endif %}</span>
                            </div>
                            <button class="btn w-100 add-to-cart-btn {% if is_out_of_stock %}btn-secondary{% else %}btn-light text-dark border{% endif %}"
                                    data-product-id="{{ product.id }}"
                                    style="font-size: 13px; padding: 8px;"
                                    {% if is_out_of_stock %}disabled{% endif %}>
                                {% if is_out_of_stock %}H·∫øt h√†ng{% else %}Th√™m v√†o gi·ªè{% endif %}
                            </button>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
            <div id="products-showing">{{ products|length }}</div>
            <div id="products-total">{{ total_products }}</div>
        ''', products=paginated_products, total_products=total_products)

    return render_template('products.html',
                         products=paginated_products,
                         total_products=total_products,
                         total_pages=total_pages,
                         current_page=page,
                         per_page=per_page,
                         categories=categories_data,
                         brands=brands_data,
                         current_condition=condition)

@app.route('/products/new')
def products_new():
    """Trang s·∫£n ph·∫©m m·ªõi 100%"""
    import requests

    try:
        # Fetch products from API
        api_url = f'{API_BASE_URL}/products/'
        response = requests.get(api_url, timeout=30)

        if response.status_code == 200:
            all_products = response.json()
            # Filter products with status treated as 'new' (contains 'new' or 'chiet')
            filtered_products = [p for p in all_products if _is_new_status(p.get('status'))]
        else:
            filtered_products = []

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching new products: {e}")
        filtered_products = []

    return render_template('products.html',
                         products=filtered_products,
                         categories=categories_data,
                         brands=brands_data,
                         current_condition='new',
                         page_title='S·∫£n Ph·∫©m M·ªõi 100%')

@app.route('/products/used')
def products_used():
    """Trang s·∫£n ph·∫©m ƒë√£ s·ª≠ d·ª•ng"""
    import requests

    try:
        # Fetch products from API
        api_url = f'{API_BASE_URL}/products/'
        response = requests.get(api_url, timeout=30)

        if response.status_code == 200:
            all_products = response.json()
            # Filter products treated as 'used' (not new by our rule)
            filtered_products = [p for p in all_products if not _is_new_status(p.get('status'))]
        else:
            filtered_products = []

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching used products: {e}")
        filtered_products = []

    return render_template('products.html',
                         products=filtered_products,
                         categories=categories_data,
                         brands=brands_data,
                         current_condition='used',
                         page_title='S·∫£n Ph·∫©m ƒê√£ S·ª≠ D·ª•ng')

@app.route('/product/<int:product_id>')
def product_detail(product_id):
    """Trang chi ti·∫øt s·∫£n ph·∫©m"""
    import requests

    try:
        # Fetch product data from API
        api_url = f'{API_BASE_URL}/products/{product_id}/'
        response = requests.get(api_url, timeout=30)

        if response.status_code == 200:
            product = response.json()
            print(f"‚úÖ Fetched product {product_id} from API: {product.get('name', 'Unknown')}")
        else:
            print(f"‚ùå API returned status {response.status_code} for product {product_id}")
            return redirect(url_for('products'))

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching product {product_id} from API: {e}")
        return redirect(url_for('products'))

    # L·∫•y ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m (t·∫°m th·ªùi ƒë·ªÉ tr·ªëng)
    product_reviews = []
    avg_rating = product.get('rating', 0)

    # S·∫£n ph·∫©m li√™n quan (t·∫°m th·ªùi ƒë·ªÉ tr·ªëng)
    related_products = []

    return render_template('product-detail.html',
                         product=product,
                         reviews=product_reviews,
                         avg_rating=avg_rating,
                         related_products=related_products)

@app.route('/api/add-to-cart', methods=['POST'])
def add_to_cart():
    """API th√™m v√†o gi·ªè h√†ng"""
    import requests

    data = request.get_json()
    product_id = data.get('product_id')
    quantity = data.get('quantity', 1)

    try:
        # Fetch product from API
        api_url = f'{API_BASE_URL}/products/{product_id}/'
        response = requests.get(api_url, timeout=30)

        if response.status_code == 200:
            product = response.json()
            # Check stock
            if product.get('stock_quantity', 0) < quantity:
                return jsonify({'success': False, 'message': 'S·ªë l∆∞·ª£ng kh√¥ng ƒë·ªß'})

            # Initialize cart in session if not exists
            if 'cart' not in session:
                session['cart'] = {}

            # Add/update product in cart
            cart = session['cart']
            if str(product_id) in cart:
                cart[str(product_id)]['quantity'] += quantity
            else:
                cart[str(product_id)] = {
                    'product_id': product_id,
                    'name': product.get('name', ''),
                    'price': product.get('discounted_price', product.get('original_price', 0)),
                    'image': product.get('image', ''),
                    'brand': product.get('brand_name', ''),
                    'quantity': quantity
                }

            # Update session
            session['cart'] = cart
            session.modified = True

            # Calculate total items in cart
            total_items = sum(item['quantity'] for item in cart.values())

            return jsonify({
                'success': True,
                'message': f'ƒê√£ th√™m {quantity} {product.get("name", "s·∫£n ph·∫©m")} v√†o gi·ªè h√†ng',
                'cart_count': total_items,
                'cart': cart
            })
        else:
            return jsonify({'success': False, 'message': 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'})

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching product for cart: {e}")
        return jsonify({'success': False, 'message': 'L·ªói khi t·∫£i th√¥ng tin s·∫£n ph·∫©m'})

@app.route('/api/cart', methods=['GET'])
def get_cart():
    """API l·∫•y th√¥ng tin gi·ªè h√†ng"""
    cart = session.get('cart', {})
    total_items = sum(item['quantity'] for item in cart.values())
    total_price = sum(item['price'] * item['quantity'] for item in cart.values())

    return jsonify({
        'success': True,
        'cart': cart,
        'total_items': total_items,
        'total_price': total_price
    })

@app.route('/api/cart/clear', methods=['POST'])
def clear_cart():
    """API x√≥a gi·ªè h√†ng"""
    session['cart'] = {}
    session.modified = True
    return jsonify({'success': True, 'message': 'ƒê√£ x√≥a gi·ªè h√†ng'})

@app.route('/api/newsletter', methods=['POST'])
def newsletter_subscribe():
    """API ƒëƒÉng k√Ω newsletter"""
    data = request.get_json()
    email = data.get('email')

    if not email or '@' not in email:
        return jsonify({'success': False, 'message': 'Email kh√¥ng h·ª£p l·ªá'})

    # ·ªû ƒë√¢y s·∫Ω l∆∞u email v√†o database
    return jsonify({'success': True, 'message': 'ƒêƒÉng k√Ω th√†nh c√¥ng!'})

@app.route('/api/search')
def search_products():
    """API t√¨m ki·∫øm s·∫£n ph·∫©m"""
    import requests

    query = request.args.get('q', '').lower()

    if len(query) < 2:
        return jsonify([])

    try:
        # Fetch products from API
        api_url = f'{API_BASE_URL}/products/'
        response = requests.get(api_url, timeout=30)
        if response.status_code != 200:
            return jsonify([])

        all_products = response.json()

        # T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m, th∆∞∆°ng hi·ªáu, ho·∫∑c danh m·ª•c
        results = []
        for product in all_products:
            try:
                product_name = product.get('name', '').lower()
                brand_name = product.get('brand_name', '').lower()
                category_name = ''
                category = product.get('category') or {}
                if isinstance(category, dict):
                    category_name = category.get('name', '').lower()
                if (
                    query in product_name or
                    query in brand_name or
                    query in category_name
                ):
                    results.append({
                        'id': product.get('id'),
                        'name': product.get('name'),
                        'brand': product.get('brand_name'),
                        'price': (product.get('discounted_price', 0) or 0) * 1000,
                        'image': product.get('image')
                    })
            except Exception:
                continue

        return jsonify(results[:5])  # Gi·ªõi h·∫°n 5 k·∫øt qu·∫£

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error searching products: {e}")
        return jsonify([])

@app.route('/cart')
def cart():
    """Trang gi·ªè h√†ng"""
    # Kh·ªüi t·∫°o gi·ªè h√†ng tr·ªëng m·∫∑c ƒë·ªãnh
    cart_items = []
    subtotal = 0
    shipping = 0
    total = 0

    return render_template('cart.html',
                         cart_items=cart_items,
                         subtotal=subtotal,
                         shipping=shipping,
                         total=total)

@app.route('/checkout')
def checkout():
    """Trang thanh to√°n"""
    # M·∫∑c ƒë·ªãnh gi·ªè h√†ng tr·ªëng cho trang thanh to√°n khi ch∆∞a th√™m s·∫£n ph·∫©m
    cart_items = []
    subtotal = 0
    shipping = 0
    total = 0
    return render_template('checkout.html',
                           cart_items=cart_items,
                           subtotal=subtotal,
                           shipping=shipping,
                           total=total)

@app.route('/events/voucher')
def voucher_wheel():
    """Trang V√≤ng Quay May M·∫Øn"""
    return render_template('voucher.html')

@app.route('/events/partner')
def partner_registration():
    """Trang ƒëƒÉng k√Ω c·ªông t√°c vi√™n"""
    return render_template('partner.html')

@app.route('/events/flash-sale')
def flash_sale_events():
    """Trang flash sale ch·ªõp nho√°ng"""
    return render_template('flash_sale.html')

@app.route('/events')
def all_events():
    """Trang t·∫•t c·∫£ s·ª± ki·ªán"""
    return render_template('events.html')

@app.route('/events/lucky-number')
def lucky_number_event():
    """Trang S·ªë may m·∫Øn"""
    return render_template('lucky-number.html')

@app.route('/login')
def login():
    """Trang ƒëƒÉng nh·∫≠p"""
    return render_template('login.html')

@app.route('/about')
def about():
    """Trang v·ªÅ ch√∫ng t√¥i"""
    return render_template('about.html')

@app.route('/profile')
def profile():
    """Trang h·ªì s∆° c√° nh√¢n"""
    return render_template('profile.html')

@app.route('/shipping-payment')
def shipping_payment():
    return render_template('shipping-payment.html')

@app.route('/shopping-guide')
def shopping_guide():
    return render_template('shopping-guide.html')

@app.route('/return-policy')
def return_policy():
    return render_template('return-policy.html')

@app.route('/online-payment-safety')
def online_payment_safety():
    return render_template('online-payment-safety.html')

@app.route('/privacy-policy')
def privacy_policy():
    return render_template('privacy-policy.html')

@app.route('/contact')
def contact():
    return render_template('contact.html')

@app.route('/news')
def news():
    return render_template('news.html')

@app.route('/support')
def support():
    return render_template('support.html')

@app.route('/skincare')
def skincare():
    return render_template('skincare.html')

@app.route('/live-chat')
def live_chat():
    return render_template('live-chat.html')

@app.route('/test-order-notification')
def test_order_notification():
    """Test page for order notification system"""
    return render_template('test_order_notification.html')

# Admin Routes
@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    """Admin Login Page"""
    if request.method == 'POST':
        data = request.get_json()
        username = data.get('username', '').strip()
        password = data.get('password', '')

        # Check admin credentials
        admin_credentials = [
            {'username': 'admin', 'password': 'admin123'},
            {'username': '0987789274', 'password': '123'},
            {'username': 'admin@buddyskincare.com', 'password': '123'},
            {'username': 'Admin BuddySkincare', 'password': '123'}
        ]

        # Validate credentials
        valid_login = False
        for cred in admin_credentials:
            if username == cred['username'] and password == cred['password']:
                valid_login = True
                break

        if valid_login:
            return jsonify({
                'success': True,
                'message': 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
            }), 401

    return render_template('admin_login.html')

@app.route('/logout')
def admin_logout():
    """Admin Logout"""
    return redirect('/admin/login')

@app.route('/admin')
def admin_dashboard():
    """Admin Dashboard"""
    return render_template('admin_dashboard.html')

@app.route('/admin/products')
def admin_products():
    """Admin - Qu·∫£n l√Ω s·∫£n ph·∫©m (unified)"""
    return render_template('admin_products.html')

@app.route('/favicon.ico')
def favicon():
    try:
        return send_file('static/favicon.ico', mimetype='image/vnd.microsoft.icon')
    except FileNotFoundError:
        # Fallback to logo if favicon doesn't exist
        return send_file('static/image/logo.png', mimetype='image/png')
    except Exception as e:
        print(f"Error serving favicon: {e}")
        return '', 204  # No content

@app.route('/admin/products/new')
def admin_products_new():
    """Admin - Qu·∫£n l√Ω s·∫£n ph·∫©m m·ªõi"""
    return render_template('admin_products_new.html')

@app.route('/admin/products/used')
def admin_products_used():
    """Admin - Qu·∫£n l√Ω s·∫£n ph·∫©m ƒë√£ s·ª≠ d·ª•ng"""
    return render_template('admin_products_used.html')

@app.route('/admin/products/flash-sale')
def admin_products_flash_sale():
    """Admin - Qu·∫£n l√Ω flash sale"""
    return render_template('admin_products_flash_sale.html')

@app.route('/admin/orders')
def admin_orders():
    """Admin - Qu·∫£n l√Ω ƒë∆°n h√†ng"""
    return render_template('admin_orders.html')


@app.route('/admin/analytics')
def admin_analytics():
    """Admin - Th·ªëng k√™ doanh thu"""
    return render_template('admin_analytics.html')

@app.route('/admin/orders/<int:order_id>')
def admin_order_detail(order_id):
    """Admin - Chi ti·∫øt ƒë∆°n h√†ng"""
    return render_template('admin_orders.html')

@app.route('/admin/orders/<int:order_id>/invoice')
def admin_order_invoice(order_id: int):
    """Admin - H√≥a ƒë∆°n in/·∫£nh cho ƒë∆°n h√†ng"""
    import requests
    try:
        resp = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=30)
        if resp.status_code != 200:
            return render_template('admin_invoice.html', order=None, error=f'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #{order_id}')
        order = resp.json()
    except Exception as e:
        return render_template('admin_invoice.html', order=None, error=f'L·ªói t·∫£i ƒë∆°n h√†ng: {str(e)}')
    return render_template('admin_invoice.html', order=order)

@app.route('/admin/orders/<int:order_id>/invoice/email', methods=['POST'])
def admin_order_invoice_email(order_id: int):
    """Send invoice via email."""
    import requests
    try:
        resp = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=30)
        if resp.status_code != 200:
            return jsonify({'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404
        order = resp.json()
    except Exception as e:
        return jsonify({'success': False, 'message': f'L·ªói t·∫£i ƒë∆°n h√†ng: {str(e)}'}), 500

    # Determine recipient
    data = request.get_json(silent=True) or {}
    recipient = (data.get('email') or order.get('email') or '').strip()
    if not recipient or '@' not in recipient:
        return jsonify({'success': False, 'message': 'Email kh√°ch h√†ng kh√¥ng h·ª£p l·ªá'}), 400

    # Render minimal HTML invoice for email
    html_content = render_template('emails/invoice_email.html', order=order)

    # SMTP configuration from Django settings
    smtp_host = os.getenv('SMTP_HOST', 'smtp.gmail.com')
    smtp_port = int(os.getenv('SMTP_PORT', '587'))
    smtp_user = os.getenv('SMTP_USER') or 'buddyskincarevn@gmail.com'
    smtp_pass = os.getenv('SMTP_PASS') or 'fkoz aohr yeub fncz'
    sender = os.getenv('SMTP_SENDER', smtp_user or 'buddyskincarevn@gmail.com')

    # Try Gmail API first, then SMTP, then fallback to file
    email_sent = False
    
    # Try Gmail API
    try:
        email_sent = send_email_via_gmail_api(
            to_email=recipient,
            subject=f'H√≥a ƒë∆°n ƒë∆°n h√†ng #{order_id} - BuddySkincare',
            html_content=html_content,
            plain_text=f'H√≥a ƒë∆°n ƒë∆°n h√†ng #{order_id} t·ª´ BuddySkincare'
        )
    except Exception as e:
        print(f"‚ùå Gmail API failed: {e}")
    
    # If Gmail API failed, try SMTP
    if not email_sent and (smtp_user and smtp_pass):
        try:
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f'H√≥a ƒë∆°n ƒë∆°n h√†ng #{order_id} - BuddySkincare'
            msg['From'] = sender
            msg['To'] = recipient
            
            # Add plain text version
            text_content = f'H√≥a ƒë∆°n ƒë∆°n h√†ng #{order_id} t·ª´ BuddySkincare'
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # Add HTML version
            html_part = MIMEText(html_content, 'html', 'utf-8')
            msg.attach(html_part)
            
            # Send email
            server = smtplib.SMTP(smtp_host, smtp_port)
            server.starttls()
            server.login(smtp_user, smtp_pass)
            server.send_message(msg)
            server.quit()
            
            email_sent = True
            print(f"‚úÖ Email sent via SMTP to {recipient}")
        except Exception as e:
            print(f"‚ùå SMTP failed: {e}")
    
    # If both failed, save to file
    if not email_sent:
        try:
            fallback_dir = os.path.join(os.getcwd(), 'sent_emails')
            os.makedirs(fallback_dir, exist_ok=True)
            filename = f'invoice_{order_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.html'
            file_path = os.path.join(fallback_dir, filename)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            return jsonify({'success': True, 'message': f'ƒê√£ l∆∞u h√≥a ƒë∆°n v√†o file: {file_path}', 'saved_path': file_path}), 200
        except Exception as e:
            return jsonify({'success': False, 'message': f'G·ª≠i email th·∫•t b·∫°i v√† l∆∞u file th·∫•t b·∫°i: {str(e)}'}), 500

    # Return success if email was sent
    if email_sent:
        return jsonify({'success': True, 'message': f'ƒê√£ g·ª≠i h√≥a ƒë∆°n ƒë·∫øn {recipient}'}), 200
    else:
        return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ g·ª≠i email'}), 500

@app.route('/admin/customers')
def admin_customers():
    """Admin - Qu·∫£n l√Ω kh√°ch h√†ng"""
    return render_template('admin_customers.html')

@app.route('/admin/vouchers')
def admin_vouchers():
    """Admin - Qu·∫£n l√Ω voucher"""
    return render_template('admin_vouchers.html')

# Lucky Number admin page
@app.route('/admin/lucky-number')
def admin_lucky_number():
    """Admin - Qu·∫£n l√Ω s·ª± ki·ªán S·ªë may m·∫Øn"""
    return render_template('admin_lucky_number.html')

@app.route('/admin/customer-data')
def admin_customer_data():
    """Admin - D·ªØ li·ªáu ti·ªáp kh√°ch h√†ng"""
    return render_template('admin_customer_data.html')

@app.route('/admin/blog')
def admin_blog():
    """Admin - Qu·∫£n l√Ω Blog"""
    return render_template('admin_blog.html')

@app.route('/blog/<int:blog_id>')
def blog_detail(blog_id):
    """Chi ti·∫øt b√†i vi·∫øt blog"""
    return render_template('blog_detail.html', blog_id=blog_id)

@app.route('/admin/email-analytics')
def admin_email_analytics():
    """Admin - Th·ªëng k√™ Email Marketing"""
    return render_template('admin_email_analytics.html')

@app.route('/admin/api/email-analytics', methods=['GET'])
def admin_api_email_analytics():
    """API l·∫•y d·ªØ li·ªáu th·ªëng k√™ email t·ª´ Gmail v√† Google Analytics"""
    try:
        # Get date range from query parameters
        start_date = request.args.get('start_date', '7daysAgo')
        end_date = request.args.get('end_date', 'today')

        # Get Gmail data (emails sent)
        gmail_data = get_gmail_data(start_date, end_date)

        # Get Google Analytics data (clicks, conversions)
        analytics_data = get_google_analytics_data(start_date, end_date)

        # Combine data
        combined_data = {}

        if gmail_data:
            combined_data['total_emails'] = gmail_data['total_emails']
            combined_data['flashsale_emails'] = gmail_data['flashsale_emails']
            combined_data['luckygame_emails'] = gmail_data['luckygame_emails']
            combined_data['other_emails'] = gmail_data['other_emails']
        else:
            # Fallback to mock data for emails
            combined_data['total_emails'] = 0
            combined_data['flashsale_emails'] = 0
            combined_data['luckygame_emails'] = 0
            combined_data['other_emails'] = 0

        if analytics_data:
            combined_data.update(analytics_data)
        else:
            # Fallback to mock data for analytics
            mock_data = get_mock_analytics_data()
            combined_data.update(mock_data)

        return jsonify(combined_data)

    except Exception as e:
        print(f"‚ùå Error in email analytics API: {e}")
        return jsonify(get_mock_analytics_data())

def get_gmail_data(start_date, end_date):
    """L·∫•y d·ªØ li·ªáu th·∫≠t t·ª´ Gmail API"""
    try:
        # Check if Gmail credentials are available
        credentials_path = os.path.join(os.getcwd(), 'gmail-credentials.json')

        if not os.path.exists(credentials_path):
            print("‚ùå Gmail credentials not found at:", credentials_path)
            print("üí° To enable real Gmail data, create gmail-credentials.json")
            return None

        # Try to import and use Gmail API
        try:
            from google.oauth2 import service_account
            from googleapiclient.discovery import build
        except ImportError:
            print("‚ùå Gmail API not installed")
            print("üí° Run: pip install google-api-python-client")
            return None

        # Initialize Gmail service
        credentials = service_account.Credentials.from_service_account_file(
            credentials_path,
            scopes=['https://www.googleapis.com/auth/gmail.readonly']
        )

        service = build('gmail', 'v1', credentials=credentials)

        print(f"üîç Fetching Gmail data from buddyskincarevn@gmail.com ({start_date} to {end_date})")

        # Query for sent emails
        query = f'from:buddyskincarevn@gmail.com after:{start_date} before:{end_date}'

        try:
            results = service.users().messages().list(
                userId='buddyskincarevn@gmail.com',
                q=query,
                maxResults=1000
            ).execute()

            messages = results.get('messages', [])

            # Count emails by campaign
            flashsale_count = 0
            luckygame_count = 0
            total_emails = len(messages)

            for message in messages:
                msg = service.users().messages().get(
                    userId='buddyskincarevn@gmail.com',
                    id=message['id']
                ).execute()

                # Check subject for campaign type
                headers = msg['payload'].get('headers', [])
                subject = ''
                for header in headers:
                    if header['name'] == 'Subject':
                        subject = header['value']
                        break

                if 'flash' in subject.lower() or 'sale' in subject.lower():
                    flashsale_count += 1
                elif 'lucky' in subject.lower() or 'game' in subject.lower():
                    luckygame_count += 1

            return {
                'total_emails': total_emails,
                'flashsale_emails': flashsale_count,
                'luckygame_emails': luckygame_count,
                'other_emails': total_emails - flashsale_count - luckygame_count
            }

        except Exception as e:
            print(f"‚ùå Error querying Gmail: {e}")
            return None

    except Exception as e:
        print(f"‚ùå Error setting up Gmail API: {e}")
        return None

def send_email_via_gmail_api(to_email, subject, html_content, plain_text=None):
    """G·ª≠i email qua Gmail API"""
    try:
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        
        credentials_path = os.path.join(os.getcwd(), 'gmail-credentials.json')
        if not os.path.exists(credentials_path):
            print("‚ùå Gmail credentials not found")
            return False
            
        # Initialize Gmail service with send scope
        credentials = service_account.Credentials.from_service_account_file(
            credentials_path,
            scopes=['https://www.googleapis.com/auth/gmail.send']
        )
        
        service = build('gmail', 'v1', credentials=credentials)
        
        # Create message
        message = MIMEMultipart('alternative')
        message['to'] = to_email
        message['from'] = 'buddyskincarevn@gmail.com'
        message['subject'] = subject
        
        # Add plain text version if provided
        if plain_text:
            text_part = MIMEText(plain_text, 'plain', 'utf-8')
            message.attach(text_part)
        
        # Add HTML version
        html_part = MIMEText(html_content, 'html', 'utf-8')
        message.attach(html_part)
        
        # Encode message
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')
        
        # Send email
        result = service.users().messages().send(
            userId='me',
            body={'raw': raw_message}
        ).execute()
        
        print(f"‚úÖ Email sent successfully to {to_email}, message ID: {result['id']}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error sending email via Gmail API: {e}")
        return False

def get_google_analytics_data(start_date, end_date):
    """L·∫•y d·ªØ li·ªáu th·∫≠t t·ª´ Google Analytics"""
    try:
        # Check if Google Analytics credentials are available
        credentials_path = os.path.join(os.getcwd(), 'google-analytics-credentials.json')

        if not os.path.exists(credentials_path):
            print("‚ùå Google Analytics credentials not found at:", credentials_path)
            print("üí° To enable real data, follow the setup guide in GOOGLE_ANALYTICS_SETUP.md")
            return None

        # Try to import and use Google Analytics Data API
        try:
            from google.analytics.data_v1beta import BetaAnalyticsDataClient
            from google.analytics.data_v1beta.types import (
                DateRange,
                Dimension,
                Metric,
                RunReportRequest,
            )
        except ImportError:
            print("‚ùå Google Analytics Data API not installed")
            print("üí° Run: pip install google-analytics-data")
            return None

        # Initialize client
        client = BetaAnalyticsDataClient.from_service_account_file(credentials_path)

        # Your actual Property ID from Google Analytics
        property_id = "504734762"  # Real Property ID from GA4

        print(f"üîç Fetching GA4 data from property {property_id} ({start_date} to {end_date})")

        # Query for email campaign data
        request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[
                Dimension(name="campaignName"),
                Dimension(name="source"),
                Dimension(name="medium"),
            ],
            metrics=[
                Metric(name="sessions"),
                Metric(name="activeUsers"),
                Metric(name="bounceRate"),
                Metric(name="conversions"),
                Metric(name="totalRevenue"),
            ],
            date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
            dimension_filter={
                "filter": {
                    "field_name": "medium",
                    "string_filter": {
                        "match_type": "EXACT",
                        "value": "email"
                    }
                }
            }
        )

        response = client.run_report(request)

        # Process the response
        campaigns = []
        total_sessions = 0
        total_users = 0
        total_conversions = 0
        total_revenue = 0

        for row in response.rows:
            campaign_name = row.dimension_values[0].value
            sessions = int(row.metric_values[0].value)
            new_users = int(row.metric_values[1].value)
            bounce_rate = float(row.metric_values[2].value)
            conversions = int(row.metric_values[3].value)
            revenue = float(row.metric_values[4].value)

            total_sessions += sessions
            total_users += new_users
            total_conversions += conversions
            total_revenue += revenue

            campaigns.append({
                'name': campaign_name,
                'sessions': sessions,
                'users': new_users,
                'bounceRate': bounce_rate,
                'conversions': conversions,
                'revenue': revenue,
                'roi': (revenue / sessions * 100) if sessions > 0 else 0
            })

        # Get timeline data
        timeline = get_timeline_data(client, property_id, start_date, end_date)

        # Get top pages data
        top_pages = get_top_pages_data(client, property_id, start_date, end_date)

        result = {
            'totalSessions': total_sessions,
            'totalUsers': total_users,
            'avgClickRate': (total_users / total_sessions * 100) if total_sessions > 0 else 0,
            'avgConversionRate': (total_conversions / total_sessions * 100) if total_sessions > 0 else 0,
            'campaigns': campaigns,
            'timeline': timeline,
            'topPages': top_pages,
            'recentActivity': []  # This would need additional API calls
        }

        print(f"‚úÖ Successfully fetched {len(campaigns)} campaigns from Google Analytics")
        return result

    except Exception as e:
        print(f"‚ùå Error fetching Google Analytics data: {e}")
        return None

def get_timeline_data(client, property_id, start_date, end_date):
    """L·∫•y d·ªØ li·ªáu timeline t·ª´ Google Analytics"""
    try:
        from google.analytics.data_v1beta.types import DateRange, Dimension, Metric, RunReportRequest
        request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[Dimension(name="date")],
            metrics=[
                Metric(name="sessions"),
                Metric(name="activeUsers"),
            ],
            date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
            dimension_filter={
                "filter": {
                    "field_name": "medium",
                    "string_filter": {
                        "match_type": "EXACT",
                        "value": "email"
                    }
                }
            }
        )

        response = client.run_report(request)
        timeline = []

        for row in response.rows:
            timeline.append({
                'date': row.dimension_values[0].value,
                'sessions': int(row.metric_values[0].value),
                'users': int(row.metric_values[1].value)
            })

        return timeline
    except Exception as e:
        print(f"‚ùå Error fetching timeline data: {e}")
        return []

def get_top_pages_data(client, property_id, start_date, end_date):
    """L·∫•y d·ªØ li·ªáu top pages t·ª´ Google Analytics"""
    try:
        from google.analytics.data_v1beta.types import DateRange, Dimension, Metric, RunReportRequest
        request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[Dimension(name="pagePath")],
            metrics=[Metric(name="activeUsers")],
            date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
            dimension_filter={
                "filter": {
                    "field_name": "medium",
                    "string_filter": {
                        "match_type": "EXACT",
                        "value": "email"
                    }
                }
            },
            order_bys=[{"metric": {"metric_name": "activeUsers"}, "desc": True}],
            limit=10
        )

        response = client.run_report(request)
        top_pages = []
        total_users = sum(int(row.metric_values[0].value) for row in response.rows)

        for row in response.rows:
            users = int(row.metric_values[0].value)
            percentage = (users / total_users * 100) if total_users > 0 else 0

            top_pages.append({
                'page': row.dimension_values[0].value,
                'users': users,
                'percentage': percentage
            })

        return top_pages
    except Exception as e:
        print(f"‚ùå Error fetching top pages data: {e}")
        return []

def get_mock_analytics_data():
    """Mock data for demonstration"""
    return {
        'totalSessions': 1250,
        'totalUsers': 187,
        'avgClickRate': 14.96,
        'avgConversionRate': 3.2,
        'campaigns': [
            {
                'name': 'Flash Sale',
                'sessions': 500,
                'users': 89,
                'bounceRate': 82.2,
                'conversions': 18,
                'revenue': 5400000,
                'roi': 12.5
            },
            {
                'name': 'Lucky Game',
                'sessions': 400,
                'users': 67,
                'bounceRate': 83.25,
                'conversions': 12,
                'revenue': 3600000,
                'roi': 10.2
            },
            {
                'name': 'Newsletter',
                'sessions': 350,
                'users': 31,
                'bounceRate': 91.14,
                'conversions': 5,
                'revenue': 1500000,
                'roi': 6.8
            }
        ],
        'timeline': [
            {'date': '2024-01-01', 'sessions': 45, 'users': 7},
            {'date': '2024-01-02', 'sessions': 52, 'users': 9},
            {'date': '2024-01-03', 'sessions': 38, 'users': 6},
            {'date': '2024-01-04', 'sessions': 67, 'users': 12},
            {'date': '2024-01-05', 'sessions': 43, 'users': 8},
            {'date': '2024-01-06', 'sessions': 55, 'users': 10},
            {'date': '2024-01-07', 'sessions': 48, 'users': 9}
        ],
        'topPages': [
            {'page': '/products', 'users': 89, 'percentage': 47.6},
            {'page': '/events/lucky-number', 'users': 67, 'percentage': 35.8},
            {'page': '/', 'users': 31, 'percentage': 16.6}
        ],
        'recentActivity': [
            {
                'time': '2024-01-07 14:30',
                'campaign': 'Flash Sale',
                'subject': 'H√†ng m·ªõi v·ªÅ, flash sale ng·∫≠p tr√†n!',
                'sent': 500,
                'clicks': 89,
                'status': 'Delivered'
            },
            {
                'time': '2024-01-06 10:15',
                'campaign': 'Lucky Game',
                'subject': 'Tr√≤ ch∆°i may m·∫Øn th√°ng n√†y!',
                'sent': 400,
                'clicks': 67,
                'status': 'Delivered'
            },
            {
                'time': '2024-01-05 16:45',
                'campaign': 'Newsletter',
                'subject': 'Tin t·ª©c m·ªπ ph·∫©m tu·∫ßn n√†y',
                'sent': 350,
                'clicks': 31,
                'status': 'Delivered'
            }
        ]
    }

# Preview invoice email template in browser
@app.route('/templates/emails/invoice_email.html')
def preview_invoice_email():
    """Preview the invoice email template at a direct URL for design/testing.
    Optional query: ?order_id=123 to load real order from API.
    """
    import requests
    order = None
    order_id = request.args.get('order_id')
    if order_id:
        try:
            resp = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=15)
            if resp.status_code == 200:
                order = resp.json()
        except Exception:
            order = None
    if not order:
        # Fallback demo order for preview
        order = {
            'id': 9999,
            'order_date': datetime.now().isoformat(timespec='minutes'),
            'payment_method': 'bank',
            'is_confirmed': True,
            'status': 'processing',
            'voucher_code': 'WELCOME10',
            'phone_number': '0987789274',
            'customer_name': 'Buddy Skincare',
            'street': '123 ƒê∆∞·ªùng ABC',
            'ward': 'Ph∆∞·ªùng 1',
            'district': 'Qu·∫≠n 1',
            'province': 'TP.HCM',
            'shipping_fee': 30.0,
            'discount_applied': 20.0,
            'total_amount': 350.0,
            'items': [
                {
                    'product': {
                        'name': 'N∆∞·ªõc c√¢n b·∫±ng Sen H·∫≠u Giang',
                        'discounted_price': 120.0,
                    },
                    'price_at_purchase': 120.0,
                    'quantity': 1
                },
                {
                    'product': {
                        'name': 'Kem ch·ªëng n·∫Øng SPF50+',
                        'discounted_price': 200.0,
                    },
                    'price_at_purchase': 200.0,
                    'quantity': 1
                }
            ]
        }
    return render_template('emails/invoice_email.html', order=order)

# Preview flash sale announcement email
@app.route('/templates/emails/flash_sale_announcement.html')
def preview_flash_sale_announcement():
    """Preview flash sale announcement email template."""
    return render_template('emails/flash_sale_announcement.html')

# Preview lucky game announcement email
@app.route('/templates/emails/lucky_game_announcement.html')
def preview_lucky_game_announcement():
    """Preview lucky game announcement email template.
    L·∫•y d·ªØ li·ªáu s·ª± ki·ªán t·ª´ API lucky-events v√† truy·ªÅn v√†o template.
    """
    import requests
    event = None
    prizes = []
    total_value_vnd = 0
    end_time_display = None
    try:
        resp = requests.get(f'{API_BASE_URL}/lucky-events/', timeout=15)
        if resp.status_code == 200:
            events = resp.json() or []
            # ∆Øu ti√™n s·ª± ki·ªán active, n·∫øu kh√¥ng c√≥ l·∫•y s·ª± ki·ªán m·ªõi nh·∫•t
            active = [e for e in events if e.get('is_active')]
            event = (active[0] if active else (events[0] if events else None))
            if event:
                prizes = event.get('prizes') or []
                try:
                    total_value_vnd = int(sum(float(p.get('value') or 0) for p in prizes) * 1000)
                except Exception:
                    total_value_vnd = 0
                # Format end time
                try:
                    raw = event.get('end_at')
                    if raw:
                        dt = datetime.fromisoformat(str(raw).replace('Z', '+00:00'))
                        end_time_display = dt.strftime('%d/%m/%Y %H:%M')
                except Exception:
                    end_time_display = None
    except Exception:
        event = None
        prizes = []
        total_value_vnd = 0
        end_time_display = None

    def fmt_vnd(n: int) -> str:
        try:
            return f"{n:,.0f}".replace(',', '.') + 'ƒë'
        except Exception:
            return '0ƒë'

    return render_template(
        'emails/lucky_game_announcement.html',
        event=event,
        prizes=prizes,
        total_value_display=fmt_vnd(total_value_vnd),
        end_time_display=end_time_display
    )

# Preview new order notification email template in browser
@app.route('/templates/emails/new_order_notification.html')
def preview_new_order_notification():
    """Preview the new order notification email template at a direct URL for design/testing.
    Optional query: ?order_id=123 to load real order from API.
    """
    import requests
    order = None
    pending_orders = []
    order_id = request.args.get('order_id')

    if order_id:
        try:
            # Get specific order
            resp = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=15)
            if resp.status_code == 200:
                order = resp.json()
        except Exception:
            order = None

    if not order:
        # Fallback demo order for preview
        order = {
            'id': 12345,
            'order_date': datetime.now().isoformat(timespec='minutes'),
            'payment_method': 'bank',
            'is_confirmed': False,
            'status': 'pending',
            'phone_number': '0987789274',
            'customer_name': 'Nguy·ªÖn Th·ªã Minh Anh',
            'email': 'minhanh@gmail.com',
            'street': '456 ƒê∆∞·ªùng XYZ',
            'ward': 'Ph∆∞·ªùng 2',
            'district': 'Qu·∫≠n 3',
            'province': 'TP.HCM',
            'total_amount': 450.0,
        }

    # Get pending orders for demo
    try:
        resp = requests.get(f'{API_BASE_URL}/orders/', timeout=15)
        if resp.status_code == 200:
            all_orders = resp.json()
            pending_orders = [o for o in all_orders if not o.get('is_confirmed', False)][:5]
    except Exception:
        # Demo pending orders
        pending_orders = [
            {
                'id': 12344,
                'customer_name': 'Tr·∫ßn VƒÉn B√¨nh',
                'phone_number': '0987654321',
                'total_amount': 320.0,
                'order_date': (datetime.now() - timedelta(hours=2)).isoformat(),
                'is_confirmed': False
            },
            {
                'id': 12343,
                'customer_name': 'L√™ Th·ªã C·∫©m',
                'phone_number': '0987123456',
                'total_amount': 180.0,
                'order_date': (datetime.now() - timedelta(hours=5)).isoformat(),
                'is_confirmed': False
            },
            {
                'id': 12342,
                'customer_name': 'Ph·∫°m VƒÉn ƒê·ª©c',
                'phone_number': '0987234567',
                'total_amount': 650.0,
                'order_date': (datetime.now() - timedelta(days=1)).isoformat(),
                'is_confirmed': False
            }
        ]

    return render_template('emails/new_order_notification.html',
                         order=order,
                         pending_orders=pending_orders,
                         current_time=datetime.now().strftime('%d/%m/%Y %H:%M:%S'))

# Orders API Endpoints
@app.route('/orders/', methods=['GET'])
def api_orders():
    """API l·∫•y danh s√°ch ƒë∆°n h√†ng (public endpoint for CTV orders)"""
    import requests

    try:
        # Get query parameters
        collaborator_code = request.args.get('collaborator_code__isnull', '')
        ctv_code = request.args.get('collaborator_code', '')
        start_date = request.args.get('order_date__gte', '')
        end_date = request.args.get('order_date__lte', '')

        print(f"üîç Fetching orders from: {API_BASE_URL}/orders/")
        print(f"üìã Query params: collaborator_code__isnull={collaborator_code}, collaborator_code={ctv_code}")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        # Build query URL
        query_params = []
        if collaborator_code == 'false':
            query_params.append('collaborator_code__isnull=false')
        if ctv_code:
            query_params.append(f'collaborator_code={ctv_code}')
        if start_date:
            query_params.append(f'order_date__gte={start_date}')
        if end_date:
            query_params.append(f'order_date__lte={end_date}')

        query_string = '&'.join(query_params)
        url = f'{API_BASE_URL}/orders/?ordering=-order_date'
        if query_string:
            url += f'&{query_string}'

        print(f"üì° Full URL: {url}")

        response = requests.get(url, headers=headers, timeout=30)
        print(f"üì° Orders API response status: {response.status_code}")

        if response.status_code == 200:
            orders = response.json()
            print(f"‚úÖ Successfully fetched {len(orders)} orders")
            return jsonify(orders)
        else:
            print(f"‚ùå Orders API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Orders API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

# CTVs API Endpoints
@app.route('/ctvs/', methods=['GET'])
def api_ctvs():
    """API l·∫•y danh s√°ch CTV"""
    import requests

    try:
        print(f"üîç Fetching CTVs from: {API_BASE_URL}/ctvs/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/ctvs/', headers=headers, timeout=30)
        print(f"üì° CTVs API response status: {response.status_code}")

        if response.status_code == 200:
            ctvs = response.json()
            print(f"‚úÖ Successfully fetched {len(ctvs)} CTVs")
            return jsonify(ctvs)
        else:
            print(f"‚ùå CTVs API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y danh s√°ch CTV. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTVs API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/ctvs/by-code/', methods=['GET'])
def api_ctvs_by_code():
    """API l·∫•y CTV theo m√£"""
    import requests

    try:
        code = request.args.get('code', '').strip()
        if not code:
            return jsonify({'error': 'Thi·∫øu m√£ CTV'}), 400

        print(f"üîç Fetching CTV by code: {code} from: {API_BASE_URL}/ctvs/by-code/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/ctvs/by-code/?code={code}', headers=headers, timeout=30)
        print(f"üì° CTV by code API response status: {response.status_code}")

        if response.status_code == 200:
            ctv = response.json()
            print(f"‚úÖ Successfully fetched CTV: {ctv.get('code', 'N/A')}")
            return jsonify(ctv)
        elif response.status_code == 404:
            print(f"‚ùå CTV not found with code: {code}")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y CTV v·ªõi m√£ n√†y'}), 404
        else:
            print(f"‚ùå CTV by code API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin CTV. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTV by code API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/ctvs/<int:ctv_id>/stats/', methods=['GET'])
def api_ctv_stats(ctv_id):
    """API l·∫•y th·ªëng k√™ CTV"""
    import requests

    try:
        print(f"üîç Fetching CTV stats for ID: {ctv_id} from: {API_BASE_URL}/ctvs/{ctv_id}/stats/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/ctvs/{ctv_id}/stats/', headers=headers, timeout=30)
        print(f"üì° CTV stats API response status: {response.status_code}")

        if response.status_code == 200:
            stats = response.json()
            print(f"‚úÖ Successfully fetched CTV stats for ID: {ctv_id}")
            return jsonify(stats)
        elif response.status_code == 404:
            print(f"‚ùå CTV stats not found for ID: {ctv_id}")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y th·ªëng k√™ CTV'}), 404
        else:
            print(f"‚ùå CTV stats API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ CTV. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTV stats API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/ctvs/<int:ctv_id>/commissions/', methods=['GET'])
def api_ctv_commissions(ctv_id):
    """API l·∫•y danh s√°ch hoa h·ªìng CTV"""
    import requests

    try:
        print(f"üîç Fetching CTV commissions for ID: {ctv_id} from: {API_BASE_URL}/ctvs/{ctv_id}/commissions/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/ctvs/{ctv_id}/commissions/', headers=headers, timeout=30)
        print(f"üì° CTV commissions API response status: {response.status_code}")

        if response.status_code == 200:
            commissions = response.json()
            print(f"‚úÖ Successfully fetched CTV commissions for ID: {ctv_id}")
            return jsonify(commissions)
        elif response.status_code == 404:
            print(f"‚ùå CTV commissions not found for ID: {ctv_id}")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y hoa h·ªìng CTV'}), 404
        else:
            print(f"‚ùå CTV commissions API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y hoa h·ªìng CTV. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTV commissions API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/ctvs/<int:ctv_id>/wallet/', methods=['GET'])
def api_ctv_wallet(ctv_id):
    """API l·∫•y th√¥ng tin v√≠ CTV"""
    import requests

    try:
        print(f"üîç Fetching CTV wallet for ID: {ctv_id} from: {API_BASE_URL}/ctvs/{ctv_id}/wallet/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/ctvs/{ctv_id}/wallet/', headers=headers, timeout=30)
        print(f"üì° CTV wallet API response status: {response.status_code}")

        if response.status_code == 200:
            wallet = response.json()
            print(f"‚úÖ Successfully fetched CTV wallet for ID: {ctv_id}")
            return jsonify(wallet)
        elif response.status_code == 404:
            print(f"‚ùå CTV wallet not found for ID: {ctv_id}")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y v√≠ CTV'}), 404
        else:
            print(f"‚ùå CTV wallet API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y v√≠ CTV. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTV wallet API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/ctvs/<int:ctv_id>/withdrawals/', methods=['GET'])
def api_ctv_withdrawals(ctv_id):
    """API l·∫•y l·ªãch s·ª≠ r√∫t ti·ªÅn CTV"""
    import requests

    try:
        print(f"üîç Fetching CTV withdrawals for ID: {ctv_id} from: {API_BASE_URL}/ctvs/{ctv_id}/withdrawals/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/ctvs/{ctv_id}/withdrawals/', headers=headers, timeout=30)
        print(f"üì° CTV withdrawals API response status: {response.status_code}")

        if response.status_code == 200:
            withdrawals = response.json()
            print(f"‚úÖ Successfully fetched CTV withdrawals for ID: {ctv_id}")
            return jsonify(withdrawals)
        elif response.status_code == 404:
            print(f"‚ùå CTV withdrawals not found for ID: {ctv_id}")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ r√∫t ti·ªÅn CTV'}), 404
        else:
            print(f"‚ùå CTV withdrawals API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ r√∫t ti·ªÅn CTV. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTV withdrawals API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/ctvs/<int:ctv_id>/withdraw/', methods=['POST'])
def api_ctv_withdraw(ctv_id):
    """API g·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn CTV"""
    import requests

    try:
        print(f"üîç Sending CTV withdrawal request for ID: {ctv_id} to: {API_BASE_URL}/ctvs/{ctv_id}/withdraw/")

        # L·∫•y d·ªØ li·ªáu t·ª´ request body
        data = request.get_json()
        print(f"üìã Withdrawal data: {data}")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.post(f'{API_BASE_URL}/ctvs/{ctv_id}/withdraw/', json=data, headers=headers, timeout=30)
        print(f"üì° CTV withdraw API response status: {response.status_code}")

        if response.status_code == 200 or response.status_code == 201:
            result = response.json()
            print(f"‚úÖ Successfully sent CTV withdrawal request for ID: {ctv_id}")
            return jsonify(result)
        elif response.status_code == 400:
            error_data = response.json()
            print(f"‚ùå CTV withdraw validation error: {error_data}")
            return jsonify({'error': error_data.get('detail', 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá')}), 400
        elif response.status_code == 404:
            print(f"‚ùå CTV not found for withdrawal ID: {ctv_id}")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y CTV'}), 404
        else:
            print(f"‚ùå CTV withdraw API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu r√∫t ti·ªÅn. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå CTV withdraw API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

# Admin API Endpoints
@app.route('/admin/api/orders', methods=['GET'])
def admin_api_orders():
    """API l·∫•y danh s√°ch ƒë∆°n h√†ng cho admin"""
    import requests

    try:
        print(f"üîç Fetching orders from: {API_BASE_URL}/orders/")

        # Try with different authentication methods
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        # First try without authentication (in case it's public)
        # Sort by order_date descending (newest first)
        response = requests.get(f'{API_BASE_URL}/orders/?ordering=-order_date', headers=headers, timeout=30)
        print(f"üì° Orders API response status: {response.status_code}")

        if response.status_code == 200:
            orders = response.json()
            print(f"‚úÖ Successfully fetched {len(orders)} orders")
            return jsonify(orders)
        elif response.status_code == 401:
            # If authentication required, try with basic auth or return empty list for now
            print("üîê Orders API requires authentication, returning empty list")
            return jsonify([])
        else:
            print(f"‚ùå Orders API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Orders API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/admin/api/orders/<int:order_id>', methods=['GET', 'PATCH'])
def admin_api_order_detail(order_id):
    """API chi ti·∫øt ƒë∆°n h√†ng cho admin"""
    import requests

    try:
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        if request.method == 'GET':
            response = requests.get(f'{API_BASE_URL}/orders/{order_id}/', headers=headers, timeout=30)
            if response.status_code == 200:
                return jsonify(response.json())
            elif response.status_code == 401:
                return jsonify({'error': 'API y√™u c·∫ßu x√°c th·ª±c'}), 401
            else:
                return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404

        elif request.method == 'PATCH':
            data = request.get_json()
            response = requests.patch(f'{API_BASE_URL}/orders/{order_id}/',
                                    json=data, headers=headers, timeout=30)
            if response.status_code == 200:
                return jsonify(response.json())
            elif response.status_code == 401:
                return jsonify({'error': 'API y√™u c·∫ßu x√°c th·ª±c'}), 401
            else:
                return jsonify({'error': 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng'}), 500

    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/admin/api/orders/<int:order_id>/confirm', methods=['POST'])
def admin_api_confirm_order(order_id):
    """API x√°c nh·∫≠n ƒë∆°n h√†ng"""
    import requests

    try:
        print(f"üîç Confirming order {order_id}...")

        # L·∫•y th√¥ng tin ƒë∆°n h√†ng tr∆∞·ªõc
        order_response = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=30)
        if order_response.status_code != 200:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404

        order_data = order_response.json()
        print(f"üì¶ Order data: {order_data}")

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        update_data = {
            'is_confirmed': True,
            'status': 'processing'
        }

        # G·ªçi API c·∫≠p nh·∫≠t ƒë∆°n h√†ng
        update_response = requests.patch(
            f'{API_BASE_URL}/orders/{order_id}/',
            json=update_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )

        print(f"üîç Update response status: {update_response.status_code}")
        print(f"üîç Update response content: {update_response.text}")

        if update_response.status_code == 200:
            print(f"‚úÖ Order {order_id} confirmed successfully")
            return jsonify({
                'success': True,
                'message': f'ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng #{order_id} th√†nh c√¥ng!'
            })
        elif update_response.status_code == 401:
            print(f"üîê API requires authentication for order update")
            return jsonify({
                'success': False,
                'message': f'‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng #{order_id} do y√™u c·∫ßu x√°c th·ª±c API.',
                'error': 'API requires authentication for order updates'
            })
        else:
            print(f"‚ùå Failed to update order: {update_response.status_code}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng: {update_response.status_code}'}), 500

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error confirming order {order_id}: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Error confirming order {order_id}: {e}")
        return jsonify({'error': f'L·ªói x√°c nh·∫≠n ƒë∆°n h√†ng: {str(e)}'}), 500

@app.route('/admin/api/orders/<int:order_id>/cancel', methods=['POST'])
def admin_api_cancel_order(order_id):
    """API h·ªßy ƒë∆°n h√†ng"""
    import requests

    try:
        print(f"üîç Cancelling order {order_id}...")

        # L·∫•y th√¥ng tin ƒë∆°n h√†ng tr∆∞·ªõc
        order_response = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=30)
        if order_response.status_code != 200:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404

        order_data = order_response.json()
        print(f"üì¶ Order data: {order_data}")

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        update_data = {
            'is_confirmed': False,
            'status': 'cancelled'
        }

        # G·ªçi API c·∫≠p nh·∫≠t ƒë∆°n h√†ng
        update_response = requests.patch(
            f'{API_BASE_URL}/orders/{order_id}/',
            json=update_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )

        if update_response.status_code == 200:
            print(f"‚úÖ Order {order_id} cancelled successfully")
            return jsonify({
                'success': True,
                'message': f'ƒê√£ h·ªßy ƒë∆°n h√†ng #{order_id} th√†nh c√¥ng!'
            })
        elif update_response.status_code == 401:
            print(f"üîê API requires authentication for order update")
            return jsonify({
                'success': False,
                'message': f'‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng #{order_id} do y√™u c·∫ßu x√°c th·ª±c API.',
                'error': 'API requires authentication for order updates'
            })
        else:
            print(f"‚ùå Failed to update order: {update_response.status_code}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng: {update_response.status_code}'}), 500

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error cancelling order {order_id}: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Error cancelling order {order_id}: {e}")
        return jsonify({'error': f'L·ªói h·ªßy ƒë∆°n h√†ng: {str(e)}'}), 500

@app.route('/admin/api/orders/<int:order_id>/ship', methods=['POST'])
def admin_api_ship_order(order_id):
    """API ƒë√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ giao h√†ng"""
    import requests

    try:
        print(f"üöö Shipping order {order_id}...")

        # L·∫•y th√¥ng tin ƒë∆°n h√†ng tr∆∞·ªõc
        order_response = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=30)
        if order_response.status_code != 200:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404

        order_data = order_response.json()
        print(f"üì¶ Order data: {order_data}")

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh 'shipped'
        update_data = {
            'status': 'shipped'
        }

        # G·ªçi API c·∫≠p nh·∫≠t ƒë∆°n h√†ng
        update_response = requests.patch(
            f'{API_BASE_URL}/orders/{order_id}/',
            json=update_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )

        if update_response.status_code == 200:
            print(f"‚úÖ Order {order_id} shipped successfully")
            return jsonify({
                'success': True,
                'message': f'ƒê√£ ƒë√°nh d·∫•u ƒë∆°n h√†ng #{order_id} l√† ƒë√£ giao h√†ng th√†nh c√¥ng!'
            })
        else:
            print(f"‚ùå Failed to update order: {update_response.status_code}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng: {update_response.status_code}'}), 500

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error shipping order {order_id}: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Error shipping order {order_id}: {e}")
        return jsonify({'error': f'L·ªói ƒë√°nh d·∫•u giao h√†ng: {str(e)}'}), 500

@app.route('/admin/api/orders/auto-complete', methods=['POST'])
def admin_api_auto_complete_orders():
    """API t·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒë∆°n h√†ng t·ª´ 'shipped' sang 'completed' sau 10 ph√∫t (ƒë·ªÉ test)"""
    import requests

    try:
        # L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i 'shipped'
        response = requests.get(f'{API_BASE_URL}/orders/', timeout=30)
        if response.status_code != 200:
            return jsonify({'error': 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng'}), 500

        orders = response.json()
        current_time = datetime.now()
        updated_orders = []

        for order in orders:
            if order.get('status') == 'shipped':
                # Ki·ªÉm tra xem ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao h√†ng h∆°n 5 ng√†y ch∆∞a
                updated_at_str = order.get('updated_at')
                if updated_at_str and updated_at_str != 'None':
                    try:
                        # Parse th·ªùi gian c·∫≠p nh·∫≠t
                        updated_at = datetime.fromisoformat(updated_at_str.replace('Z', '+00:00'))
                        # Chuy·ªÉn v·ªÅ timezone local ƒë·ªÉ so s√°nh
                        updated_at = updated_at.replace(tzinfo=None)

                        # Ki·ªÉm tra n·∫øu ƒë√£ qua 10 ph√∫t (ƒë·ªÉ test)
                        time_diff = current_time - updated_at
                        if time_diff.total_seconds() >= 600:  # 600 gi√¢y = 10 ph√∫t
                            # C·∫≠p nh·∫≠t tr·∫°ng th√°i sang 'completed'
                            update_data = {
                                'status': 'completed'
                            }

                            update_response = requests.patch(
                                f'{API_BASE_URL}/orders/{order["id"]}/',
                                data=update_data,
                                timeout=30
                            )

                            if update_response.status_code == 200:
                                updated_orders.append({
                                    'id': order['id'],
                                    'customer_name': order.get('customer_name', 'N/A'),
                                    'updated_at': updated_at_str
                                })
                                print(f"‚úÖ Auto-completed order {order['id']}")
                            else:
                                print(f"‚ùå Failed to auto-complete order {order['id']}: {update_response.status_code}")
                    except Exception as e:
                        print(f"‚ùå Error processing order {order['id']}: {e}")
                        continue

        return jsonify({
            'message': f'ƒê√£ t·ª± ƒë·ªông ho√†n th√†nh {len(updated_orders)} ƒë∆°n h√†ng',
            'updated_orders': updated_orders
        })

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error in auto-complete: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Error in auto-complete: {e}")
        return jsonify({'error': f'L·ªói t·ª± ƒë·ªông ho√†n th√†nh ƒë∆°n h√†ng: {str(e)}'}), 500

@app.route('/admin/api/products', methods=['GET'])
def admin_api_products():
    """API l·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m cho admin"""
    import requests

    try:
        response = requests.get(f'{API_BASE_URL}/admin-products/', timeout=30)
        if response.status_code == 200:
            products = response.json()
            return jsonify(products)
        else:
            return jsonify({'error': 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m'}), 500
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/admin/api/products', methods=['POST'])
def admin_api_add_product():
    """API th√™m s·∫£n ph·∫©m m·ªõi cho admin"""
    import requests

    try:
        data = request.get_json()
        response = requests.post(f'{API_BASE_URL}/admin-products/', json=data, timeout=30)
        if response.status_code == 201:
            return jsonify(response.json())
        else:
            return jsonify({'error': 'Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m'}), 500
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

# Customer API Endpoints
@app.route('/admin/api/customers', methods=['GET'])
def admin_api_customers():
    """API l·∫•y danh s√°ch kh√°ch h√†ng cho admin"""
    import requests

    try:
        print(f"üîç Fetching customers from: {API_BASE_URL}/customer/")

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.get(f'{API_BASE_URL}/customer/', headers=headers, timeout=30)
        print(f"üì° Customers API response status: {response.status_code}")

        if response.status_code == 200:
            customers = response.json()
            print(f"‚úÖ Successfully fetched {len(customers)} customers")
            return jsonify(customers)
        elif response.status_code == 401:
            print("üîê Customers API requires authentication, returning empty list")
            return jsonify([])
        else:
            print(f"‚ùå Customers API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ l·∫•y danh s√°ch kh√°ch h√†ng. API tr·∫£ v·ªÅ: {response.status_code}'}), 500
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Customers API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/admin/api/customers/<int:customer_id>', methods=['GET', 'PATCH'])
def admin_api_customer_detail(customer_id):
    """API chi ti·∫øt kh√°ch h√†ng cho admin"""
    import requests

    try:
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        if request.method == 'GET':
            response = requests.get(f'{API_BASE_URL}/customer/{customer_id}/', headers=headers, timeout=30)
            if response.status_code == 200:
                return jsonify(response.json())
            elif response.status_code == 401:
                return jsonify({'error': 'API y√™u c·∫ßu x√°c th·ª±c'}), 401
            else:
                return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng'}), 404

        elif request.method == 'PATCH':
            data = request.get_json()
            response = requests.patch(f'{API_BASE_URL}/customer/{customer_id}/',
                                    json=data, headers=headers, timeout=30)
            if response.status_code == 200:
                return jsonify(response.json())
            elif response.status_code == 401:
                return jsonify({'error': 'API y√™u c·∫ßu x√°c th·ª±c'}), 401
            else:
                return jsonify({'error': 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√°ch h√†ng'}), 500

    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/admin/api/products/<int:product_id>', methods=['PATCH'])
def admin_api_update_product(product_id):
    """API c·∫≠p nh·∫≠t s·∫£n ph·∫©m cho admin"""
    import requests

    try:
        data = request.get_json()
        print(f"üîß Updating product {product_id} with data: {data}")
        print(f"üîß Data keys: {list(data.keys()) if data else 'None'}")

        # Validate required fields
        if not data:
            return jsonify({'error': 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t'}), 400

        # Clean up data - remove None values and ensure proper types
        # Only send fields that the Django API can handle for updates
        allowed_fields = {
            'name', 'brand_name', 'original_price', 'discounted_price', 'import_price',
            'stock_quantity', 'sold_quantity', 'status', 'description', 'is_visible'
        }

        cleaned_data = {}
        for key, value in data.items():
            if key in allowed_fields and value is not None and value != '':
                # Convert data types to match Django API expectations
                if key in ['original_price', 'discounted_price', 'import_price']:
                    try:
                        cleaned_data[key] = float(value)
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è Could not convert {key}={value} to float, skipping")
                        continue
                elif key in ['stock_quantity', 'sold_quantity']:
                    try:
                        cleaned_data[key] = int(value)
                    except (ValueError, TypeError):
                        print(f"‚ö†Ô∏è Could not convert {key}={value} to int, skipping")
                        continue
                elif key == 'is_visible':
                    # Handle boolean field
                    cleaned_data[key] = bool(value)
                else:
                    cleaned_data[key] = str(value)

        print(f"üßπ Cleaned data: {cleaned_data}")
        print(f"üßπ Cleaned data keys: {list(cleaned_data.keys())}")

        # Try to work around the Django model bug by sending minimal data
        # Start with just the most essential fields that we know work
        minimal_data = {}
        if 'name' in cleaned_data:
            minimal_data['name'] = cleaned_data['name']
        if 'status' in cleaned_data:
            minimal_data['status'] = cleaned_data['status']
        if 'description' in cleaned_data:
            minimal_data['description'] = cleaned_data['description']
        if 'is_visible' in cleaned_data:
            minimal_data['is_visible'] = cleaned_data['is_visible']

        print(f"üéØ Trying minimal update with: {minimal_data}")

        response = requests.patch(f'{API_BASE_URL}/admin-products/{product_id}/',
                                data=minimal_data, timeout=30)

        # If the minimal update works, try to update additional fields in separate requests
        if response.status_code == 200 and len(cleaned_data) > len(minimal_data):
            print(f"‚úÖ Minimal update successful, trying additional fields...")

            # Try to update price fields separately
            price_data = {}
            if 'original_price' in cleaned_data:
                price_data['original_price'] = cleaned_data['original_price']
            if 'discounted_price' in cleaned_data:
                price_data['discounted_price'] = cleaned_data['discounted_price']
            if 'import_price' in cleaned_data:
                price_data['import_price'] = cleaned_data['import_price']

            if price_data:
                print(f"üí∞ Trying price update with: {price_data}")
                price_response = requests.patch(f'{API_BASE_URL}/admin-products/{product_id}/',
                                              data=price_data, timeout=30)
                if price_response.status_code != 200:
                    print(f"‚ö†Ô∏è Price update failed: {price_response.status_code}")
                else:
                    print(f"‚úÖ Price update successful")

            # Try to update quantity fields separately
            quantity_data = {}
            if 'stock_quantity' in cleaned_data:
                quantity_data['stock_quantity'] = cleaned_data['stock_quantity']
            if 'sold_quantity' in cleaned_data:
                quantity_data['sold_quantity'] = cleaned_data['sold_quantity']

            if quantity_data:
                print(f"üì¶ Trying quantity update with: {quantity_data}")
                quantity_response = requests.patch(f'{API_BASE_URL}/admin-products/{product_id}/',
                                                  data=quantity_data, timeout=30)
                if quantity_response.status_code != 200:
                    print(f"‚ö†Ô∏è Quantity update failed: {quantity_response.status_code}")
                else:
                    print(f"‚úÖ Quantity update successful")

            # Get the final updated product data
            final_response = requests.get(f'{API_BASE_URL}/admin-products/{product_id}/', timeout=30)
            if final_response.status_code == 200:
                response = final_response

        print(f"üì° API Response status: {response.status_code}")
        if response.status_code != 200:
            print(f"‚ùå API Error response: {response.text}")
            try:
                error_data = response.json()
                return jsonify({'error': f'API Error: {error_data}'}), response.status_code
            except:
                return jsonify({'error': f'API Error: {response.text}'}), response.status_code

        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Update successful: {result}")
            return jsonify(result)
        else:
            return jsonify({'error': f'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m. API tr·∫£ v·ªÅ: {response.status_code} - {response.text}'}), 500

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.route('/admin/api/products/<int:product_id>', methods=['DELETE'])
def admin_api_delete_product(product_id):
    """API x√≥a s·∫£n ph·∫©m cho admin"""
    import requests

    try:
        print(f"üóëÔ∏è Deleting product {product_id}")
        
        response = requests.delete(f'{API_BASE_URL}/admin-products/{product_id}/', timeout=30)
        
        if response.status_code == 204:
            print(f"‚úÖ Product {product_id} deleted successfully")
            return jsonify({'success': True, 'message': 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'})
        elif response.status_code == 404:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'}), 404
        else:
            print(f"‚ùå Delete failed: {response.status_code} - {response.text}")
            return jsonify({'error': f'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. API tr·∫£ v·ªÅ: {response.status_code}'}), response.status_code

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.route('/backend/api/products/<int:product_id>/remove_tag/', methods=['POST'])
def remove_product_tag(product_id):
    """API x√≥a tag kh·ªèi s·∫£n ph·∫©m"""
    import requests

    try:
        data = request.get_json()
        tag_name = data.get('tag_name', 'FlashSale')
        
        print(f"üè∑Ô∏è Removing tag '{tag_name}' from product {product_id}")
        
        # G·ªçi Django API ƒë·ªÉ x√≥a tag
        response = requests.post(
            f'{API_BASE_URL}/products/{product_id}/remove_tag/',
            json={'tag_name': tag_name},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Successfully removed tag '{tag_name}' from product {product_id}")
            return jsonify({
                'success': True,
                'message': f'ƒê√£ x√≥a tag "{tag_name}" kh·ªèi s·∫£n ph·∫©m',
                'data': result
            })
        elif response.status_code == 404:
            print(f"‚ùå Product {product_id} not found")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'}), 404
        else:
            print(f"‚ùå Failed to remove tag: {response.status_code} - {response.text}")
            return jsonify({'error': 'Kh√¥ng th·ªÉ x√≥a tag kh·ªèi s·∫£n ph·∫©m'}), 500
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.route('/backend/api/products/<int:product_id>/add_tag/', methods=['POST'])
def add_product_tag(product_id):
    """API th√™m tag v√†o s·∫£n ph·∫©m"""
    import requests

    try:
        data = request.get_json()
        tag_name = data.get('tag_name', 'FlashSale')
        
        print(f"üè∑Ô∏è Adding tag '{tag_name}' to product {product_id}")
        
        # G·ªçi Django API ƒë·ªÉ th√™m tag
        response = requests.post(
            f'{API_BASE_URL}/products/{product_id}/add_tag/',
            json={'tag_name': tag_name},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Successfully added tag '{tag_name}' to product {product_id}")
            return jsonify({
                'success': True,
                'message': f'ƒê√£ th√™m tag "{tag_name}" v√†o s·∫£n ph·∫©m',
                'data': result
            })
        elif response.status_code == 404:
            print(f"‚ùå Product {product_id} not found")
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'}), 404
        else:
            print(f"‚ùå Failed to add tag: {response.status_code} - {response.text}")
            return jsonify({'error': 'Kh√¥ng th·ªÉ th√™m tag v√†o s·∫£n ph·∫©m'}), 500
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.route('/backend/api/products/add_tag/', methods=['POST'])
def add_products_to_tag():
    """API th√™m nhi·ªÅu s·∫£n ph·∫©m v√†o tag"""
    import requests

    try:
        data = request.get_json()
        tag_name = data.get('tag_name', 'FlashSale')
        product_ids = data.get('product_ids', [])
        
        if not product_ids:
            return jsonify({'error': 'Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn'}), 400
        
        print(f"üè∑Ô∏è Adding tag '{tag_name}' to products: {product_ids}")
        
        success_count = 0
        errors = []
        
        # Th√™m tag cho t·ª´ng s·∫£n ph·∫©m
        for product_id in product_ids:
            try:
                response = requests.post(
                    f'{API_BASE_URL}/products/{product_id}/add_tag/',
                    json={'tag_name': tag_name},
                    timeout=30
                )
                
                if response.status_code == 200:
                    success_count += 1
                else:
                    errors.append(f"S·∫£n ph·∫©m {product_id}: {response.status_code}")
            except Exception as e:
                errors.append(f"S·∫£n ph·∫©m {product_id}: {str(e)}")
        
        return jsonify({
            'success': True,
            'message': f'ƒê√£ th√™m tag "{tag_name}" cho {success_count}/{len(product_ids)} s·∫£n ph·∫©m',
            'success_count': success_count,
            'total_count': len(product_ids),
            'errors': errors
        })
        
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.route('/api/upload-blog-image', methods=['POST'])
def upload_blog_image():
    """API upload ·∫£nh blog l√™n Cloudinary"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        if file and file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
            # Check file size (max 10MB)
            file.seek(0, 2)  # Seek to end
            file_size = file.tell()
            file.seek(0)  # Reset to beginning

            if file_size > 10 * 1024 * 1024:  # 10MB limit
                return jsonify({'error': 'File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB'}), 400

            # Upload to Cloudinary with image optimization for blog
            upload_result = cloudinary.uploader.upload(
                file,
                folder="blog_images",
                public_id=f"blog_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                resource_type="image",
                # Image optimization settings for blog
                quality="auto:good",  # Ch·∫•t l∆∞·ª£ng t·ªët cho blog
                fetch_format="auto",  # T·ª± ƒë·ªông ch·ªçn format t·ªëi ∆∞u
                width=1200,  # Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa
                height=800,  # Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa (t·ª∑ l·ªá 3:2)
                crop="limit",  # Gi·ªØ nguy√™n t·ª∑ l·ªá, ch·ªâ resize n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
                flags="progressive",  # T·∫°o ·∫£nh progressive JPEG
                transformation=[
                    {"width": 1200, "height": 800, "crop": "limit"},
                    {"quality": "auto:good"},
                    {"fetch_format": "auto"}
                ]
            )

            return jsonify({
                'success': True,
                'url': upload_result['secure_url'],
                'public_id': upload_result['public_id']
            })
        else:
            return jsonify({'error': 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n PNG, JPG, JPEG, GIF, WEBP'}), 400

    except Exception as e:
        print(f"Error uploading blog image: {str(e)}")
        return jsonify({'error': f'L·ªói upload: {str(e)}'}), 500

@app.route('/api/upload-bank-transfer', methods=['POST'])
def upload_bank_transfer():
    """API upload ·∫£nh chuy·ªÉn kho·∫£n l√™n Cloudinary"""
    try:
        print(f"üîç Upload request received. Files: {list(request.files.keys())}")
        
        if 'file' not in request.files:
            print("‚ùå No file in request")
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        file = request.files['file']
        print(f"üìÅ File received: {file.filename}, Content type: {file.content_type}")
        
        if file.filename == '':
            print("‚ùå Empty filename")
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        # Check file extension
        allowed_extensions = ('.png', '.jpg', '.jpeg', '.gif', '.webp')
        if not file.filename.lower().endswith(allowed_extensions):
            print(f"‚ùå Invalid file extension: {file.filename}")
            return jsonify({'error': 'File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Ch·ªâ ch·∫•p nh·∫≠n: PNG, JPG, JPEG, GIF, WEBP'}), 400

        # Check file size (max 10MB)
        file.seek(0, 2)  # Seek to end
        file_size = file.tell()
        file.seek(0)  # Reset to beginning
        print(f"üìè File size: {file_size} bytes")

        if file_size > 10 * 1024 * 1024:  # 10MB limit
            print(f"‚ùå File too large: {file_size} bytes")
            return jsonify({'error': 'File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB'}), 400

        # Check Cloudinary configuration
        try:
            import cloudinary
            print(f"‚òÅÔ∏è Cloudinary configured: {cloudinary.config().cloud_name}")
        except Exception as config_error:
            print(f"‚ùå Cloudinary config error: {config_error}")
            return jsonify({'error': 'L·ªói c·∫•u h√¨nh Cloudinary'}), 500

        # Upload to Cloudinary with simplified settings
        print("üöÄ Starting Cloudinary upload...")
        upload_result = cloudinary.uploader.upload(
            file,
            folder="bank_transfers",
            public_id=f"transfer_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            resource_type="image",
            quality="auto",
            fetch_format="auto"
        )

        print(f"‚úÖ Upload successful: {upload_result.get('secure_url', 'No URL')}")
        return jsonify({
            'success': True,
            'url': upload_result['secure_url'],
            'public_id': upload_result['public_id']
        })

    except Exception as e:
        print(f"‚ùå Error uploading bank transfer image: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'L·ªói upload ·∫£nh: {str(e)}'}), 500

@app.route('/api/ctv-applications/', methods=['POST'])
def api_ctv_applications():
    """API proxy cho ƒëƒÉng k√Ω CTV - forward ƒë·∫øn Django backend"""
    import requests
    
    try:
        # Forward request ƒë·∫øn Django backend
        django_url = f'{API_BASE_URL}/ctv-applications/'
        
        # L·∫•y d·ªØ li·ªáu t·ª´ request
        data = request.get_json()
        
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        print(f"üîç Forwarding CTV application to: {django_url}")
        print(f"üìù Data: {data}")
        
        response = requests.post(django_url, json=data, headers=headers, timeout=30)
        
        print(f"üì° Django response status: {response.status_code}")
        
        if response.status_code in [200, 201]:
            result = response.json()
            print(f"‚úÖ CTV application submitted successfully")
            return jsonify(result)
        else:
            print(f"‚ùå Django API error: {response.status_code} - {response.text}")
            return jsonify({'error': f'ƒêƒÉng k√Ω th·∫•t b·∫°i. API tr·∫£ v·ªÅ: {response.status_code}'}), response.status_code
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Django API connection error: {e}")
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500
    except Exception as e:
        print(f"‚ùå CTV application error: {e}")
        return jsonify({'error': f'L·ªói h·ªá th·ªëng: {str(e)}'}), 500

@app.route('/api/upload-marketing-resources-bulk', methods=['POST'])
def upload_marketing_resources_bulk():
    """API upload nhi·ªÅu ·∫£nh t√†i nguy√™n marketing l√™n Cloudinary h√†ng lo·∫°t"""
    try:
        files = request.files.getlist('files')
        if not files or files[0].filename == '':
            return jsonify({'error': 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn'}), 400

        # Get form data
        resource_type = request.form.get('resource_type', 'new_product')
        description = request.form.get('description', '')
        is_active = request.form.get('is_active') == 'on'

        results = []
        errors = []

        for i, file in enumerate(files):
            try:
                if file.filename == '':
                    errors.append(f"File {i+1}: T√™n file tr·ªëng")
                    continue

                # Check file extension
                if not file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp', '.pdf', '.doc', '.docx')):
                    errors.append(f"File {i+1} ({file.filename}): ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£")
                    continue

                # Check file size (max 10MB)
                file.seek(0, 2)  # Seek to end
                file_size = file.tell()
                file.seek(0)  # Reset to beginning

                if file_size > 10 * 1024 * 1024:
                    errors.append(f"File {i+1} ({file.filename}): Qu√° l·ªõn ({file_size/1024/1024:.1f}MB)")
                    continue

                # Upload to Cloudinary
                upload_result = cloudinary.uploader.upload(
                    file,
                    folder="marketing_resources",
                    public_id=f"resource_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{i}_{file.filename.split('.')[0]}",
                    resource_type="image" if file.content_type.startswith('image/') else "raw",
                    quality="auto:good" if file.content_type.startswith('image/') else None,
                    fetch_format="auto" if file.content_type.startswith('image/') else None,
                    width=2000 if file.content_type.startswith('image/') else None,
                    height=2000 if file.content_type.startswith('image/') else None,
                    crop="limit" if file.content_type.startswith('image/') else None,
                    flags="progressive" if file.content_type.startswith('image/') else None
                )

                # Create MarketingResource record via API
                resource_data = {
                    'name': file.filename.rsplit('.', 1)[0],  # Remove extension
                    'description': description,
                    'resource_type': resource_type,
                    'file_url': upload_result['secure_url'],
                    'thumbnail_url': upload_result['secure_url'],
                    'file_size': upload_result.get('bytes', file_size),
                    'is_active': is_active
                }

                # Call Django API to create resource record
                import requests
                api_response = requests.post(
                    f'{API_BASE_URL}/marketing-resources/',
                    json=resource_data,
                    headers={'Content-Type': 'application/json'},
                    timeout=30
                )

                if api_response.status_code in [200, 201]:
                    results.append({
                        'filename': file.filename,
                        'url': upload_result['secure_url'],
                        'status': 'success'
                    })
                    print(f"‚úÖ Successfully processed: {file.filename}")
                else:
                    errors.append(f"File {i+1} ({file.filename}): L·ªói t·∫°o record ({api_response.status_code})")
                    print(f"‚ùå Failed to create record for: {file.filename}")

            except Exception as file_error:
                errors.append(f"File {i+1} ({file.filename}): {str(file_error)}")
                print(f"‚ùå Error processing {file.filename}: {str(file_error)}")

        return jsonify({
            'success': True,
            'total_files': len(files),
            'successful_uploads': len(results),
            'errors': errors,
            'results': results,
            'message': f'Upload ho√†n t·∫•t: {len(results)}/{len(files)} file th√†nh c√¥ng'
        })

    except Exception as e:
        print(f"‚ùå Bulk upload error: {str(e)}")
        return jsonify({'error': f'L·ªói upload h√†ng lo·∫°t: {str(e)}'}), 500

@app.route('/api/upload-marketing-resource', methods=['POST'])
def upload_marketing_resource():
    """API upload ·∫£nh t√†i nguy√™n marketing l√™n Cloudinary"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        if file and file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
            # Check file size (max 10MB)
            file.seek(0, 2)  # Seek to end
            file_size = file.tell()
            file.seek(0)  # Reset to beginning

            if file_size > 10 * 1024 * 1024:  # 10MB limit
                return jsonify({'error': 'File qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB'}), 400

            # Upload to Cloudinary with image optimization for marketing resources
            upload_result = cloudinary.uploader.upload(
                file,
                folder="marketing_resources",
                public_id=f"resource_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file.filename.split('.')[0]}",
                resource_type="image",
                # Image optimization settings
                quality="auto:good",  # Ch·∫•t l∆∞·ª£ng t·ªët cho marketing materials
                fetch_format="auto",  # T·ª± ƒë·ªông ch·ªçn format t·ªëi ∆∞u
                width=2000,  # Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa cho marketing
                height=2000,  # Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa cho marketing
                crop="limit",  # Gi·ªØ nguy√™n t·ª∑ l·ªá
                flags="progressive",  # T·∫°o ·∫£nh progressive
                transformation=[
                    {"width": 2000, "height": 2000, "crop": "limit"},
                    {"quality": "auto:good"},
                    {"fetch_format": "auto"}
                ]
            )

            return jsonify({
                'success': True,
                'url': upload_result['secure_url'],
                'public_id': upload_result['public_id'],
                'file_size': file_size
            })
        else:
            return jsonify({'error': 'File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Ch·ªâ ch·∫•p nh·∫≠n: PNG, JPG, JPEG, GIF, WEBP'}), 400

    except Exception as e:
        print(f"‚ùå Error uploading marketing resource image: {e}")
        return jsonify({'error': f'L·ªói upload ·∫£nh: {str(e)}'}), 500

@app.route('/api/product-stock/<int:product_id>')
def api_product_stock(product_id):
    """API l·∫•y th√¥ng tin stock c·ªßa s·∫£n ph·∫©m"""
    import requests

    try:
        response = requests.get(f'{API_BASE_URL}/admin-products/{product_id}/', timeout=30)
        if response.status_code == 200:
            product = response.json()
            return jsonify({
                'id': product.get('id'),
                'name': product.get('name'),
                'stock_quantity': product.get('stock_quantity', 0)
            })
        else:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'}), 404
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/backend/api/orders/<int:order_id>/confirm', methods=['POST'])
def api_confirm_order(order_id):
    """API x√°c nh·∫≠n ƒë∆°n h√†ng (kh√¥ng gi·∫£m t·ªìn kho)"""
    import requests
    
    try:
        # G·ªçi API Django ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng
        response = requests.post(f'{API_BASE_URL}/orders/{order_id}/confirm/', timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return jsonify(result)
        else:
            error_data = response.json() if response.content else {}
            return jsonify({'error': error_data.get('error', f'HTTP error! status: {response.status_code}')}), response.status_code
            
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/backend/api/orders/<int:order_id>/cancel', methods=['POST'])
def api_cancel_order(order_id):
    """API h·ªßy ƒë∆°n h√†ng v√† kh√¥i ph·ª•c t·ªìn kho"""
    import requests
    
    try:
        # G·ªçi API Django ƒë·ªÉ h·ªßy ƒë∆°n h√†ng
        response = requests.post(f'{API_BASE_URL}/orders/{order_id}/cancel/', timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return jsonify(result)
        else:
            error_data = response.json() if response.content else {}
            return jsonify({'error': error_data.get('error', f'HTTP error! status: {response.status_code}')}), response.status_code
            
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/backend/api/orders/<int:order_id>/update-items', methods=['POST'])
def api_update_order_items(order_id):
    """Proxy c·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng"""
    import requests
    try:
        response = requests.post(f'{API_BASE_URL}/orders/{order_id}/update-items/', json=request.get_json(force=True), timeout=30)
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            error_data = response.json() if response.content else {}
            return jsonify({'error': error_data.get('error', f'HTTP error! status: {response.status_code}')}), response.status_code
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/backend/api/orders/<int:order_id>/ship', methods=['POST'])
def api_ship_order(order_id):
    """API ƒë√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ giao"""
    import requests
    
    try:
        # G·ªçi API Django ƒë·ªÉ ƒë√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ giao
        response = requests.post(f'{API_BASE_URL}/orders/{order_id}/ship/', timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return jsonify(result)
        else:
            error_data = response.json() if response.content else {}
            return jsonify({'error': error_data.get('error', f'HTTP error! status: {response.status_code}')}), response.status_code
            
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi: {str(e)}'}), 500

@app.route('/api/download-image')
def api_download_image():
    """Proxy download an image URL with Content-Disposition attachment to force save-as.
    Query params:
      - url: required, absolute image URL
      - filename: optional, suggested filename (fallback derives from URL)
    """
    try:
        import requests
        img_url = request.args.get('url', '').strip()
        filename = request.args.get('filename', '').strip()
        if not img_url:
            return jsonify({'error': 'Thi·∫øu tham s·ªë url'}), 400

        # Fetch binary with short timeout
        resp = requests.get(img_url, timeout=20, stream=True)
        if resp.status_code != 200:
            return jsonify({'error': f'Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh: {resp.status_code}'}), 502

        # Guess filename
        if not filename:
            try:
                from urllib.parse import urlparse
                import os as _os
                path = urlparse(img_url).path
                base = _os.path.basename(path) or 'image'
                # ensure simple name
                filename = base.split('?')[0] or 'image'
            except Exception:
                filename = 'image'

        # Detect content-type
        content_type = resp.headers.get('Content-Type', 'application/octet-stream')
        data = resp.content
        return send_file(
            BytesIO(data),
            mimetype=content_type,
            as_attachment=True,
            download_name=filename
        )
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói t·∫£i ·∫£nh: {str(e)}'}), 502
    except Exception as e:
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.route('/api/send-new-order-notification', methods=['POST'])
def send_new_order_notification():
    """API g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng m·ªõi cho admin"""
    import requests

    try:
        data = request.get_json()
        order_id = data.get('order_id')

        if not order_id:
            return jsonify({'error': 'Thi·∫øu order_id'}), 400

        # L·∫•y th√¥ng tin ƒë∆°n h√†ng
        order_response = requests.get(f'{API_BASE_URL}/orders/{order_id}/', timeout=30)
        if order_response.status_code != 200:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'}), 404

        order = order_response.json()

        # L·∫•y danh s√°ch ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n
        orders_response = requests.get(f'{API_BASE_URL}/orders/', timeout=30)
        pending_orders = []
        if orders_response.status_code == 200:
            all_orders = orders_response.json()
            pending_orders = [o for o in all_orders if not o.get('is_confirmed', False)][:10]  # L·∫•y t·ªëi ƒëa 10 ƒë∆°n h√†ng

        # T·∫°o URLs cho admin panel
        order_absolute_url = f'https://buddyskincare.vn/admin/orders/{order_id}/'
        all_orders_url = 'https://buddyskincare.vn/admin/orders'

        # Render email template
        html_content = render_template('emails/new_order_notification.html',
                                     order=order,
                                     pending_orders=pending_orders,
                                     order_absolute_url=order_absolute_url,
                                     all_orders_url=all_orders_url,
                                     current_time=datetime.now().strftime('%d/%m/%Y %H:%M:%S'))

        # SMTP configuration
        smtp_host = os.getenv('SMTP_HOST', 'smtp.gmail.com')
        smtp_port = int(os.getenv('SMTP_PORT', '587'))
        smtp_user = os.getenv('SMTP_USER')
        smtp_pass = os.getenv('SMTP_PASS')
        sender = os.getenv('SMTP_SENDER', smtp_user or 'no-reply@buddyskincare.vn')
        admin_email = os.getenv('ADMIN_EMAIL', 'buddyskincarevn@gmail.com')

        # Try Gmail API first, then SMTP, then fallback to file
        email_sent = False
        
        # Try Gmail API
        try:
            email_sent = send_email_via_gmail_api(
                to_email=admin_email,
                subject=f'üîî ƒê∆°n h√†ng m·ªõi #{order_id} c·∫ßn x√°c nh·∫≠n - BuddySkincare',
                html_content=html_content,
                plain_text=f'ƒê∆°n h√†ng m·ªõi #{order_id} t·ª´ {order.get("customer_name", "Kh√°ch h√†ng")} c·∫ßn x√°c nh·∫≠n'
            )
        except Exception as e:
            print(f"‚ùå Gmail API failed: {e}")
        
        # If Gmail API failed, try SMTP
        if not email_sent and (smtp_user and smtp_pass):
            try:
                msg = MIMEMultipart('alternative')
                msg['Subject'] = f'üîî ƒê∆°n h√†ng m·ªõi #{order_id} c·∫ßn x√°c nh·∫≠n - BuddySkincare'
                msg['From'] = sender
                msg['To'] = admin_email
                
                # Add plain text version
                text_content = f'ƒê∆°n h√†ng m·ªõi #{order_id} t·ª´ {order.get("customer_name", "Kh√°ch h√†ng")} c·∫ßn x√°c nh·∫≠n'
                text_part = MIMEText(text_content, 'plain', 'utf-8')
                msg.attach(text_part)
                
                # Add HTML version
                html_part = MIMEText(html_content, 'html', 'utf-8')
                msg.attach(html_part)
                
                # Send email
                server = smtplib.SMTP(smtp_host, smtp_port)
                server.starttls()
                server.login(smtp_user, smtp_pass)
                server.send_message(msg)
                server.quit()
                
                email_sent = True
                print(f"‚úÖ Email sent via SMTP to {admin_email}")
            except Exception as e:
                print(f"‚ùå SMTP failed: {e}")
        
        # If both failed, save to file
        if not email_sent:
            try:
                fallback_dir = os.path.join(os.getcwd(), 'sent_emails')
                os.makedirs(fallback_dir, exist_ok=True)
                filename = f'new_order_notification_{order_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.html'
                file_path = os.path.join(fallback_dir, filename)
                print(f"üîç Saving email to: {file_path}")
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                print(f"‚úÖ Email saved successfully to: {file_path}")
                return jsonify({
                    'success': True,
                    'message': f'ƒê√£ l∆∞u th√¥ng b√°o ƒë∆°n h√†ng m·ªõi v√†o file: {file_path}',
                    'saved_path': file_path
                }), 200
            except Exception as e:
                print(f"‚ùå Error saving email file: {e}")
                return jsonify({'success': False, 'message': f'G·ª≠i email th·∫•t b·∫°i v√† l∆∞u file th·∫•t b·∫°i: {str(e)}'}), 500

        # Return success if email was sent
        if email_sent:
            return jsonify({
                'success': True,
                'message': f'ƒê√£ g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng m·ªõi ƒë·∫øn {admin_email}'
            }), 200
        else:
            return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ g·ª≠i email'}), 500

    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'L·ªói k·∫øt n·ªëi API: {str(e)}'}), 500
    except Exception as e:
        return jsonify({'error': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}'}), 500

@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

if __name__ == '__main__':
    # T·∫°o th∆∞ m·ª•c static n·∫øu ch∆∞a c√≥
    os.makedirs('static', exist_ok=True)
    os.makedirs('static/css', exist_ok=True)
    os.makedirs('static/js', exist_ok=True)
    os.makedirs('static/image', exist_ok=True)

    print("üöÄ BuddySkincare Website ƒëang kh·ªüi ƒë·ªông...")
    print("üì± Truy c·∫≠p: http://localhost:8000")
    print("üõçÔ∏è Trang ch·ªß: http://localhost:8000/")
    print("üì¶ S·∫£n ph·∫©m: http://localhost:8000/products")
    print("üõí Gi·ªè h√†ng: http://localhost:8000/cart")
    print("üí≥ Thanh to√°n: http://localhost:8000/checkout")
    print("üîê ƒêƒÉng nh·∫≠p: http://localhost:8000/login")
    print("\n‚ú® T√≠nh nƒÉng demo:")
    print("- Flash sale v·ªõi countdown timer")
    print("- B·ªô l·ªçc s·∫£n ph·∫©m ƒëa ti√™u ch√≠")
    print("- ƒê√°nh gi√° v√† b√¨nh lu·∫≠n")
    print("- Responsive design")
    print("- Add to cart v·ªõi animation")
    print("- Newsletter subscription")
    print("\nüîß ƒê·ªÉ d·ª´ng server: Ctrl+C")

# --- CTV Pages (Flask render) ---
@app.route('/ctv/login')
@app.route('/ctv/login/')
def ctv_login_page():
    return render_template('ctv_login.html')


@app.route('/ctv/dashboard')
@app.route('/ctv/dashboard/')
def ctv_dashboard_page():
    return render_template('ctv_dashboard.html')


@app.route('/ctv/wallet')
@app.route('/ctv/wallet/')
def ctv_wallet_page():
    return render_template('ctv_wallet.html')


@app.route('/ctv/orders')
@app.route('/ctv/orders/')
def ctv_orders_page():
    return render_template('ctv_orders.html')


@app.route('/ctv/profile')
@app.route('/ctv/profile/')
def ctv_profile_page():
    return render_template('ctv_profile.html')


@app.route('/ctv/place-order')
@app.route('/ctv/place-order/')
def ctv_place_order_page():
    return render_template('ctv_place_order.html')


@app.route('/ctv/resources')
@app.route('/ctv/resources/')
def ctv_resources_page():
    return render_template('ctv_resources.html')


# --- CTV Auth (server-side session) ---
@app.route('/ctv/auth/login', methods=['POST'])
def ctv_auth_login():
    import requests
    try:
        data = request.get_json(silent=True) or {}
        print(f"üîç Login attempt: {data}")
        # Login CTV b·∫±ng phone v√† password_text
        resp = requests.post(f"{API_BASE_URL}/ctvs/login/", json=data, timeout=20)
        print(f"üîç API Response status: {resp.status_code}")
        print(f"üîç API Response content: {resp.text}")

        if resp.status_code != 200:
            return (resp.text, resp.status_code, resp.headers.items())
        payload = resp.json()
        print(f"üîç API Payload: {payload}")

        # Set session v·ªõi CTV data
        session['ctv'] = payload.get('ctv', {})
        print(f"‚úÖ Session set: {session.get('ctv', {}).get('code', 'Unknown')}")
        print(f"‚úÖ Session data: {session.get('ctv')}")

        return jsonify({'success': True, 'ctv': payload.get('ctv', {})})
    except Exception as e:
        print(f"‚ùå Login error: {str(e)}")
        return jsonify({'detail': f'L·ªói ƒëƒÉng nh·∫≠p: {str(e)}'}), 502


@app.route('/ctv/auth/logout')
def ctv_auth_logout():
    session.pop('ctv', None)
    session.pop('access_token', None)
    return redirect('/ctv/login')


@app.route('/admin/messages')
def admin_messages():
    """Admin page for managing customer messages."""
    return render_template('admin_messages.html')

@app.route('/admin/ctv')
def admin_ctv():
    """Admin page for managing CTVs."""
    return render_template('admin_ctv.html')

@app.route('/admin/resources')
def admin_resources():
    """Admin page for managing marketing resources."""
    return render_template('admin_resources.html')

@app.route('/admin/api/ctvs/<int:ctv_id>/send-welcome-email', methods=['POST'])
def send_ctv_welcome_email(ctv_id):
    """Send welcome email to CTV with login credentials."""
    try:
        # Get CTV data from API
        resp = requests.get(f'{API_BASE_URL}/ctvs/{ctv_id}/', timeout=30)
        if resp.status_code != 200:
            return jsonify({'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y CTV'}), 404

        ctv_data = resp.json()

        # Get data from request
        data = request.get_json(silent=True) or {}
        ctv_name = data.get('ctv_name') or ctv_data.get('full_name', '')
        ctv_email = data.get('ctv_email') or ctv_data.get('email', '')
        ctv_phone = ctv_data.get('phone', '')
        ctv_password = ctv_data.get('password_text', '')

        if not ctv_email or '@' not in ctv_email:
            return jsonify({'success': False, 'message': 'Email CTV kh√¥ng h·ª£p l·ªá'}), 400

        if not ctv_password:
            return jsonify({'success': False, 'message': 'CTV ch∆∞a c√≥ m·∫≠t kh·∫©u. Vui l√≤ng c·∫≠p nh·∫≠t m·∫≠t kh·∫©u tr∆∞·ªõc khi g·ª≠i email.'}), 400

        # Create login URL
        login_url = f"{request.url_root}ctv/login"

        # Render email template
        html_content = render_template('emails/ctv_welcome_email.html',
                                     ctv_name=ctv_name,
                                     ctv_phone=ctv_phone,
                                     ctv_password=ctv_password,
                                     login_url=login_url)

        # SMTP configuration
        smtp_host = os.getenv('SMTP_HOST', 'smtp.gmail.com')
        smtp_port = int(os.getenv('SMTP_PORT', '587'))
        smtp_user = os.getenv('SMTP_USER', 'buddyskincarevn@gmail.com')
        smtp_pass = os.getenv('SMTP_PASS', 'pyvd idcm rsrf apjn')
        sender = os.getenv('SMTP_SENDER', smtp_user)

        # Create email message
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f'üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi BuddySkincare - Th√¥ng tin t√†i kho·∫£n CTV'
        msg['From'] = sender
        msg['To'] = ctv_email

        # Attach HTML content
        msg.attach(MIMEText(html_content, 'html', 'utf-8'))

        # Send email
        with smtplib.SMTP(smtp_host, smtp_port, timeout=20) as server:
            server.starttls()
            server.login(smtp_user, smtp_pass)
            server.sendmail(sender, [ctv_email], msg.as_string())

        return jsonify({
            'success': True,
            'message': f'ƒê√£ g·ª≠i email ch√†o m·ª´ng ƒë·∫øn {ctv_email}',
            'email_sent': True
        }), 200

    except smtplib.SMTPAuthenticationError:
        return jsonify({
            'success': False,
            'message': 'L·ªói x√°c th·ª±c email. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh SMTP.',
            'email_sent': False
        }), 500
    except smtplib.SMTPException as e:
        return jsonify({
            'success': False,
            'message': f'L·ªói khi g·ª≠i email: {str(e)}',
            'email_sent': False
        }), 500
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'L·ªói h·ªá th·ªëng: {str(e)}',
            'email_sent': False
        }), 500

@app.before_request
def _guard_ctv_pages():
    path = request.path or ''
    print(f"üîç Before request - Path: {path}")
    if path.startswith('/ctv/') and not path.startswith('/ctv/login') and not path.startswith('/ctv/auth/'):
        ctv_session = session.get('ctv')
        print(f"üîç CTV Guard - Path: {path}, Session CTV: {ctv_session}")
        print(f"üîç Session keys: {list(session.keys())}")
        if not ctv_session:
            print(f"‚ùå Redirecting to login - No CTV session found")
            return redirect('/ctv/login')
        else:
            print(f"‚úÖ CTV session found: {ctv_session.get('code', 'Unknown')}")
            # Th√™m th√¥ng tin CTV v√†o context ƒë·ªÉ template c√≥ th·ªÉ s·ª≠ d·ª•ng
            from flask import g
            g.ctv = ctv_session


# Sitemap routes
@app.route('/sitemap_index.xml')
def sitemap_index():
    """Sitemap index file"""
    from flask import make_response
    response = make_response(render_template('sitemap_index.html', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/sitemap_pages.xml')
def sitemap_pages():
    """Main pages sitemap"""
    from flask import make_response
    response = make_response(render_template('sitemap_pages.xml', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/sitemap_products.xml')
def sitemap_products():
    """Products sitemap"""
    from flask import make_response
    response = make_response(render_template('sitemap_products.xml', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/sitemap_blog.xml')
def sitemap_blog():
    """Blog sitemap"""
    from flask import make_response
    response = make_response(render_template('sitemap_blog.xml', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/sitemap_categories.xml')
def sitemap_categories():
    """Categories sitemap"""
    from flask import make_response
    response = make_response(render_template('sitemap_categories.xml', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/sitemap_static.xml')
def sitemap_static():
    """Static pages sitemap"""
    from flask import make_response
    response = make_response(render_template('sitemap_static.xml', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/sitemap_simple.xml')
def sitemap_simple():
    """Simple sitemap for testing"""
    from flask import make_response
    response = make_response(render_template('sitemap_simple.xml', current_date=datetime.now().strftime('%Y-%m-%d')))
    response.headers['Content-Type'] = 'application/xml'
    return response

@app.route('/robots.txt')
def robots_txt():
    """Robots.txt file"""
    from flask import make_response
    response = make_response(render_template('robots.txt'))
    response.headers['Content-Type'] = 'text/plain'
    return response



@app.route('/api/upload-cccd', methods=['POST'])
def upload_cccd_image():
    """Upload ·∫£nh CCCD l√™n Cloudinary - ƒë∆°n gi·∫£n"""
    try:
        print(f"üîç CCCD Upload request received")
        
        if 'file' not in request.files:
            return jsonify({'error': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400

        file = request.files['file']
        print(f"üìÅ File: {file.filename}")
        
        # Upload tr·ª±c ti·∫øp l√™n Cloudinary
        from datetime import datetime
        
        # Reset file pointer
        file.seek(0)
        
        print(f"üöÄ Uploading to Cloudinary...")
        print(f"üìÅ File size: {file.content_length} bytes")
        print(f"üìÅ File type: {file.content_type}")
        
        upload_result = cloudinary.uploader.upload(
            file,
            folder="ctv_cccd",
            public_id=f"cccd_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            resource_type="image",
            # Th√™m c√°c tham s·ªë ƒë·ªÉ ƒë·∫£m b·∫£o upload th√†nh c√¥ng
            use_filename=True,
            unique_filename=True,
            overwrite=False
        )

        print(f"‚úÖ Upload successful!")
        print(f"üîó URL: {upload_result['secure_url']}")
        print(f"üÜî Public ID: {upload_result['public_id']}")
        print(f"üìè Size: {upload_result.get('bytes', 'Unknown')} bytes")
        
        return jsonify({
            'success': True,
            'url': upload_result['secure_url'],
            'public_id': upload_result['public_id'],
            'size': upload_result.get('bytes', 0)
        })

    except Exception as e:
        print(f"‚ùå Upload error: {e}")
        return jsonify({'error': f'L·ªói upload: {str(e)}'}), 500

# Backlink Content Routes
@app.route('/beauty-ingredient-dictionary')
def beauty_ingredient_dictionary():
    """T·ª´ ƒëi·ªÉn th√†nh ph·∫ßn m·ªπ ph·∫©m - Linkable asset cho backlinks"""
    return render_template('beauty_ingredient_dictionary.html')

@app.route('/skin-type-quiz')
def skin_type_quiz():
    """Quiz ki·ªÉm tra lo·∫°i da - Interactive tool cho backlinks"""
    return render_template('skin_type_quiz.html')

@app.route('/skincare-step')
def skincare_step():
    """Quy tr√¨nh skincare - H∆∞·ªõng d·∫´n chƒÉm s√≥c da"""
    return render_template('skincare-step.html')

@app.route('/skincare-guide-2024')
def skincare_guide_2024():
    """H∆∞·ªõng d·∫´n skincare to√†n di·ªán 2024 - Ultimate guide cho backlinks"""
    return render_template('skincare_guide_2024.html')

@app.route('/beauty-trends-vietnam')
def beauty_trends_vietnam():
    """Xu h∆∞·ªõng l√†m ƒë·∫πp Vi·ªát Nam 2024 - Data-driven content cho backlinks"""
    return render_template('beauty_trends_vietnam.html')

@app.route('/expert-beauty-advice')
def expert_beauty_advice():
    """T∆∞ v·∫•n l√†m ƒë·∫πp t·ª´ chuy√™n gia - Expert roundup cho backlinks"""
    return render_template('expert_beauty_advice.html')

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8000)
