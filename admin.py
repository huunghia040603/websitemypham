from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.db import models
from ckeditor.widgets import CKEditorWidget
from .models import *
from django import forms
from django.utils import timezone
from django.contrib import messages
from django.db.models import Q


# T·∫°o m·ªôt trang admin t√πy ch·ªânh
class MyAdminSite(admin.AdminSite):
    site_header = "H·ªá th·ªëng qu·∫£n l√Ω Buddy Skincare"
    site_title = "Buddy Skincare Admin Portal"
    index_title = "Ch√†o m·ª´ng ƒë·∫øn v·ªõi trang qu·∫£n tr·ªã"

admin_site = MyAdminSite(name='myadmin')

# Custom filter for image count
class ImageCountFilter(admin.SimpleListFilter):
    title = 'S·ªë l∆∞·ª£ng ·∫£nh'
    parameter_name = 'image_count'

    def lookups(self, request, model_admin):
        return (
            ('0', '‚ùå Kh√¥ng c√≥ ·∫£nh'),
            ('1', 'üñºÔ∏è 1 ·∫£nh'),
            ('2', 'üñºÔ∏è 2 ·∫£nh'),
            ('3', 'üñºÔ∏è 3 ·∫£nh'),
            ('4', 'üñºÔ∏è 4 ·∫£nh'),
        )

    def queryset(self, request, queryset):
        if self.value() == '0':
            return queryset.filter(
                Q(image__isnull=True) | Q(image=''),
                Q(image_2__isnull=True) | Q(image_2=''),
                Q(image_3__isnull=True) | Q(image_3=''),
                Q(image_4__isnull=True) | Q(image_4='')
            )
        elif self.value() == '1':
            return queryset.filter(
                ~Q(image__isnull=True) & ~Q(image=''),
                Q(image_2__isnull=True) | Q(image_2=''),
                Q(image_3__isnull=True) | Q(image_3=''),
                Q(image_4__isnull=True) | Q(image_4='')
            )
        elif self.value() == '2':
            return queryset.filter(
                ~Q(image__isnull=True) & ~Q(image=''),
                ~Q(image_2__isnull=True) & ~Q(image_2=''),
                Q(image_3__isnull=True) | Q(image_3=''),
                Q(image_4__isnull=True) | Q(image_4='')
            )
        elif self.value() == '3':
            return queryset.filter(
                ~Q(image__isnull=True) & ~Q(image=''),
                ~Q(image_2__isnull=True) & ~Q(image_2=''),
                ~Q(image_3__isnull=True) & ~Q(image_3=''),
                Q(image_4__isnull=True) | Q(image_4='')
            )
        elif self.value() == '4':
            return queryset.filter(
                ~Q(image__isnull=True) & ~Q(image=''),
                ~Q(image_2__isnull=True) & ~Q(image_2=''),
                ~Q(image_3__isnull=True) & ~Q(image_3=''),
                ~Q(image_4__isnull=True) & ~Q(image_4='')
            )

# --- User Admin ---
class CustomUserAdmin(BaseUserAdmin):
    list_display = ('name', 'email', 'phone_number', 'is_staff', 'is_active', 'date_joined', 'avatar')
    list_filter = ('is_staff', 'is_active')
    search_fields = ('name', 'email', 'phone_number')
    filter_horizontal = ('groups', 'user_permissions',)

    fieldsets = (
        (None, {'fields': ('email', 'phone_number', 'password')}),
        ('Th√¥ng tin c√° nh√¢n', {'fields': ('name', 'dob', 'address', 'avatar')}),
        ('Ph√¢n quy·ªÅn', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Ng√†y quan tr·ªçng', {'fields': ('last_login', 'date_joined')}),
    )

    add_fieldsets = (
        (None, {'fields': ('email', 'phone_number', 'password', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
    )

    ordering = ('email',)


class CustomerAdmin(admin.ModelAdmin):
    list_display = ('name', 'email', 'phone_number', 'points', 'level')
    search_fields = ('name', 'email', 'phone_number')
    list_filter = ('level',)
    fieldsets = (
        ('Th√¥ng tin c∆° b·∫£n', {'fields': ('name', 'email', 'phone_number', 'address', 'dob', 'avatar')}),
        ('ƒêi·ªÉm v√† C·∫•p ƒë·ªô', {'fields': ('points', 'level')}),
        ('Ng√†y quan tr·ªçng', {'fields': ('date_joined', 'last_login')}),
    )
    readonly_fields = ('points', 'level', 'date_joined', 'last_login')


class CollaboratorAdmin(admin.ModelAdmin):
    list_display = ('name', 'email', 'phone_number', 'sales_code', 'points', 'level')
    search_fields = ('name', 'email', 'phone_number', 'sales_code')
    list_filter = ('level',)
    fieldsets = (
        ('Th√¥ng tin c∆° b·∫£n', {'fields': ('name', 'email', 'phone_number', 'address', 'dob', 'avatar')}),
        ('M√£ CTV', {'fields': ('sales_code',)}),
        ('ƒêi·ªÉm v√† C·∫•p ƒë·ªô', {'fields': ('points', 'level')}),
        ('Ng√†y quan tr·ªçng', {'fields': ('date_joined', 'last_login')}),
    )
    readonly_fields = ('points', 'level', 'date_joined', 'last_login')


# --- Product-related Admin ---
class BrandAdmin(admin.ModelAdmin):
    list_display = ('id','name', 'country')
    search_fields = ('name',)


class TagAdmin(admin.ModelAdmin):
    list_display = ('code', 'name', 'status', 'start_date', 'end_date', 'discounted_price_reduction')
    search_fields = ('name', 'code')
    list_filter = ('status', 'start_date', 'end_date')

    def save_model(self, request, obj, form, change):
        # T·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng th√°i tag khi l∆∞u
        now = timezone.now()
        if obj.start_date <= now and obj.end_date >= now:
            obj.status = 'active'
        elif obj.start_date > now:
            obj.status = 'upcoming'
        else:
            obj.status = 'expired'
        super().save_model(request, obj, form, change)


class GiftAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ('name',)



# S·ª≠a l·∫°i class ProductAdmin
class ProductAdmin(admin.ModelAdmin):
    list_display = (
        'id', 'display_image_preview', 'name', 'brand', 'rating', 'display_tags', 'category',
        'display_image_count', 'stock_quantity', 'import_price', 'original_price', 'discounted_price',
        'discount_rate', 'status', 'is_visible'
    )

    # Ch·ªâ gi·ªØ l·∫°i c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ªânh s·ª≠a ƒë∆∞·ª£c
    list_editable = (
        'name', 'brand', 'stock_quantity', 'import_price',
        'original_price', 'discounted_price', 'status', 'is_visible'
    )

    list_filter = ('brand', 'category', 'tags', 'status', 'is_visible', ImageCountFilter)
    search_fields = ('name', 'brand__name', 'status')

    # S·ª≠ d·ª•ng filter_horizontal ƒë·ªÉ ch·ªçn tags v√† gifts
    filter_horizontal = ('tags', 'gifts')

    formfield_overrides = {
        models.TextField: {'widget': CKEditorWidget},
    }

    fieldsets = (
        (None, {'fields': ('name', 'brand', 'category')}),
        ('·∫¢nh s·∫£n ph·∫©m', {'fields': ('image', 'image_2', 'image_3', 'image_4')}),
        ('M√¥ t·∫£', {'fields': ('description', 'ingredients')}),
        ('Th√¥ng tin gi√° v√† kho', {'fields': ('import_price', 'original_price', 'discounted_price', 'stock_quantity', 'sold_quantity')}),
        # B·ªè tags v√† gifts kh·ªèi fieldsets ƒë·ªÉ ch√∫ng ƒë∆∞·ª£c hi·ªÉn th·ªã b·ªüi filter_horizontal
        ('Thu·ªôc t√≠nh kh√°c', {'fields': ('rating', 'status', 'is_visible')}),
        ('Tags v√† Qu√† t·∫∑ng', {'fields': ('tags', 'gifts')}),
    )

    readonly_fields = ('discount_rate', 'savings_price')

    def display_tags(self, obj):
        return ", ".join([tag.name for tag in obj.tags.all()])

    display_tags.short_description = "Tags"
    
    def display_image_count(self, obj):
        count = obj.get_image_count()
        if count == 0:
            return "‚ùå Kh√¥ng c√≥ ·∫£nh"
        elif count == 1:
            return "üñºÔ∏è 1 ·∫£nh"
        else:
            return f"üñºÔ∏è {count} ·∫£nh"

    display_image_count.short_description = "S·ªë ·∫£nh"
    
    def display_image_preview(self, obj):
        """Hi·ªÉn th·ªã preview ·∫£nh ch√≠nh"""
        if obj.image:
            return f'<img src="{obj.image}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;" />'
        return "‚ùå Kh√¥ng c√≥ ·∫£nh"
    
    display_image_preview.short_description = "·∫¢nh ch√≠nh"
    display_image_preview.allow_tags = True


# --- Order-related Admin ---
class VoucherAdmin(admin.ModelAdmin):
    list_display = ('code', 'discount_type', 'discount_value', 'is_active', 'valid_from', 'valid_to', 'times_used')
    list_filter = ('discount_type', 'is_active')
    search_fields = ('code',)


class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 1
    raw_id_fields = ('product',)


class OrderAdmin(admin.ModelAdmin):
    inlines = [OrderItemInline]
    list_display = ('id','order_code', 'customer_name', 'phone_number', 'order_date', 'total_amount', 'shipping_fee', 'collaborator_code', 'voucher', 'status', 'is_confirmed')
    list_filter = ('order_date', 'status', 'payment_method', 'is_confirmed')
    search_fields = ('customer_name', 'phone_number', 'collaborator_code', 'order_code')
    readonly_fields = ('total_amount', 'discount_applied', 'shipping_fee', 'order_date')
    list_editable = ('status', 'is_confirmed')
    actions = ['confirm_orders', 'ship_orders', 'cancel_orders']
    fieldsets = (
        (None, {'fields': ('order_code', 'customer', 'status', 'is_confirmed')}),
        ('Th√¥ng tin kh√°ch h√†ng', {'fields': ('customer_name', 'phone_number', 'zalo_phone_number', 'email')}),
        ('ƒê·ªãa ch·ªâ giao h√†ng', {'fields': ('street', 'ward', 'district', 'province')}),
        ('Thanh to√°n v√† Khuy·∫øn m√£i', {'fields': ('payment_method', 'bank_transfer_image', 'notes', 'voucher', 'collaborator_code')}),
        ('Chi ti·∫øt ƒë∆°n h√†ng', {'fields': ('total_amount', 'shipping_fee', 'discount_applied')}),
    )

    def confirm_orders(self, request, queryset):
        """X√°c nh·∫≠n c√°c ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn"""
        updated = 0
        for order in queryset.filter(status='pending'):
            order.status = 'processing'
            order.is_confirmed = True
            order.save()
            updated += 1

        self.message_user(request, f'ƒê√£ x√°c nh·∫≠n {updated} ƒë∆°n h√†ng.')
    confirm_orders.short_description = "X√°c nh·∫≠n c√°c ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn"

    def ship_orders(self, request, queryset):
        """ƒê√°nh d·∫•u c√°c ƒë∆°n h√†ng ƒë√£ giao"""
        updated = 0
        for order in queryset.filter(status='processing'):
            order.status = 'shipped'
            order.save()
            updated += 1

        self.message_user(request, f'ƒê√£ ƒë√°nh d·∫•u {updated} ƒë∆°n h√†ng ƒë√£ giao.')
    ship_orders.short_description = "ƒê√°nh d·∫•u c√°c ƒë∆°n h√†ng ƒë√£ giao"

    def cancel_orders(self, request, queryset):
        """H·ªßy c√°c ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn"""
        updated = 0
        for order in queryset.exclude(status='cancelled'):
            order.status = 'cancelled'
            order.save()
            updated += 1

        self.message_user(request, f'ƒê√£ h·ªßy {updated} ƒë∆°n h√†ng.')
    cancel_orders.short_description = "H·ªßy c√°c ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn"

    def customer_name(self, obj):
        return obj.customer_name

    def phone_number(self, obj):
        return obj.phone_number

    customer_name.short_description = 'T√™n Kh√°ch H√†ng'
    phone_number.short_description = 'S·ªë ƒëi·ªán tho·∫°i'


class BlogAdmin(admin.ModelAdmin):
    """
    T√πy ch·ªânh giao di·ªán qu·∫£n tr·ªã cho model Blog
    """
    # C√°c tr∆∞·ªùng hi·ªÉn th·ªã tr√™n trang danh s√°ch Blog
    list_display = ('title', 'tag', 'post_date', 'views', 'is_active')

    list_filter = ('tag', 'post_date', 'is_active')

    # Th√™m thanh t√¨m ki·∫øm d·ª±a tr√™n c√°c tr∆∞·ªùng
    search_fields = ('title', 'short_description', 'content')
    fieldsets = (
        (None, {
            'fields': ('title', 'short_description', 'content', 'link', 'img_thumbnail')
        }),
        ('Th√¥ng tin chi ti·∫øt', {
            'fields': ('tag', 'is_active', 'views'),
            'classes': ('collapse',) # ·∫®n ph·∫ßn n√†y, c√≥ th·ªÉ m·ªü r·ªông
        }),
    )

    # Ch·ªâ cho ph√©p ch·ªânh s·ª≠a c√°c tr∆∞·ªùng n√†y trong trang qu·∫£n tr·ªã
    readonly_fields = (
        'post_date',
        'views'
    )


# --- ƒêƒÉng k√Ω c√°c models v·ªõi admin_site t√πy ch·ªânh ---
admin_site.register(User, CustomUserAdmin)
admin_site.register(Admin)
# ·∫®n model Collaborator c≈© ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
# admin_site.register(Collaborator, CollaboratorAdmin)
admin_site.register(Staff)
admin_site.register(Customer, CustomerAdmin)
admin_site.register(Brand, BrandAdmin)
admin_site.register(Category)
admin_site.register(Tag, TagAdmin)
admin_site.register(Gift, GiftAdmin)
admin_site.register(Product, ProductAdmin)
admin_site.register(Voucher, VoucherAdmin)
admin_site.register(Order, OrderAdmin)
admin_site.register(OrderItem)
admin_site.register(Blog, BlogAdmin)

# --- Analytics ---
class AnalyticsSnapshotAdmin(admin.ModelAdmin):
    list_display = ('period', 'period_key', 'total_revenue', 'total_profit', 'created_at')
    list_filter = ('period', 'created_at')
    search_fields = ('period_key',)
    readonly_fields = ('created_at',)

admin_site.register(AnalyticsSnapshot, AnalyticsSnapshotAdmin)


# --- Lucky Number Event Admin ---
class LuckyPrizeInline(admin.TabularInline):
    model = LuckyPrize
    extra = 1
    fields = ('name', 'image', 'value', 'order')


class LuckyEventAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'start_at', 'end_at', 'is_active', 'lucky_number')
    list_filter = ('is_active',)
    search_fields = ('title',)
    inlines = [LuckyPrizeInline]
    fieldsets = (
        (None, {'fields': ('title', 'description')}),
        ('Th·ªùi gian', {'fields': ('start_at', 'end_at', 'is_active')}),
        ('K·∫øt qu·∫£', {'fields': ('lucky_number',)}),
    )


class LuckyParticipantAdmin(admin.ModelAdmin):
    list_display = ('id', 'event', 'name', 'zalo_phone', 'email', 'chosen_number', 'submitted_at')
    list_filter = ('event', 'chosen_number')
    search_fields = ('name', 'zalo_phone', 'email', 'address', 'message')
    readonly_fields = ('submitted_at',)
    fieldsets = (
        ('Th√¥ng tin c∆° b·∫£n', {'fields': ('event', 'chosen_number', 'name', 'zalo_phone', 'email', 'address')}),
        ('Th√¥ng tin kh√°c', {'fields': ('message', 'submitted_at')}),
    )


class LuckyWinnerAdmin(admin.ModelAdmin):
    list_display = ('event', 'participant', 'get_number', 'prize', 'decided_at')
    readonly_fields = ('decided_at',)

    def get_number(self, obj):
        try:
            return obj.participant.chosen_number
        except Exception:
            return '-'
    get_number.short_description = 'S·ªë may m·∫Øn'


admin_site.register(LuckyEvent, LuckyEventAdmin)
admin_site.register(LuckyParticipant, LuckyParticipantAdmin)
admin_site.register(LuckyWinner, LuckyWinnerAdmin)


# --- CTV (Affiliate) Admin ---
class CTVLevelAdmin(admin.ModelAdmin):
    list_display = ('id', 'name', 'commission_percent')
    search_fields = ('name',)


class CTVApplicationAdmin(admin.ModelAdmin):
    list_display = ('id', 'full_name', 'phone', 'email', 'desired_code', 'status', 'created_at')
    list_filter = ('status', 'created_at')
    search_fields = ('full_name', 'phone', 'email', 'desired_code')
    readonly_fields = ('created_at',)
    list_editable = ('status',)
    actions = ['approve_applications', 'reject_applications']

    def approve_applications(self, request, queryset):
        """Duy·ªát c√°c ƒë∆°n ƒëƒÉng k√Ω CTV ƒë∆∞·ª£c ch·ªçn"""
        approved = 0
        for app in queryset.filter(status='pending'):
            # Ki·ªÉm tra xem ƒë√£ c√≥ CTV v·ªõi SƒêT n√†y ch∆∞a
            if CTV.objects.filter(phone=app.phone).exists():
                self.message_user(request, f'CTV v·ªõi SƒêT {app.phone} ƒë√£ t·ªìn t·∫°i!', level=messages.WARNING)
                continue

            # T·∫°o CTV m·ªõi
            level = CTVLevel.objects.order_by('id').first()
            code = app.desired_code or f"CTV{app.phone[-4:] if app.phone else ''}"
            base = code or 'CTV'
            candidate = base
            suffix = 1
            while CTV.objects.filter(code__iexact=candidate).exists():
                candidate = f"{base}{suffix}"
                suffix += 1

            ctv = CTV.objects.create(
                code=candidate,
                desired_code=app.desired_code,
                full_name=app.full_name,
                phone=app.phone,
                email=app.email,
                address=app.address,
                bank_name=app.bank_name,
                bank_number=app.bank_number,
                bank_holder=app.bank_holder,
                cccd_front_url=app.cccd_front_url,
                cccd_back_url=app.cccd_back_url,
                level=level,
                is_active=True,
            )
            CTVWallet.objects.get_or_create(ctv=ctv)

            app.status = 'approved'
            app.agreed = True
            app.save()
            approved += 1

        self.message_user(request, f'ƒê√£ duy·ªát {approved} ƒë∆°n ƒëƒÉng k√Ω CTV.')
    approve_applications.short_description = "Duy·ªát c√°c ƒë∆°n ƒëƒÉng k√Ω CTV ƒë∆∞·ª£c ch·ªçn"

    def reject_applications(self, request, queryset):
        """T·ª´ ch·ªëi c√°c ƒë∆°n ƒëƒÉng k√Ω CTV ƒë∆∞·ª£c ch·ªçn"""
        updated = 0
        for app in queryset.filter(status='pending'):
            app.status = 'rejected'
            app.save()
            updated += 1

        self.message_user(request, f'ƒê√£ t·ª´ ch·ªëi {updated} ƒë∆°n ƒëƒÉng k√Ω CTV.')
    reject_applications.short_description = "T·ª´ ch·ªëi c√°c ƒë∆°n ƒëƒÉng k√Ω CTV ƒë∆∞·ª£c ch·ªçn"


class CTVAdminForm(forms.ModelForm):
    class Meta:
        model = CTV
        fields = '__all__'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Hi·ªÉn th·ªã m·∫≠t kh·∫©u text ƒë√£ l∆∞u
        if self.instance and self.instance.pk and self.instance.password_text:
            self.fields['password_text'].help_text = 'M·∫≠t kh·∫©u hi·ªán t·∫°i (c√≥ th·ªÉ s·ª≠a).'
        else:
            self.fields['password_text'].help_text = 'Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ t·∫°o/c·∫≠p nh·∫≠t t√†i kho·∫£n ƒëƒÉng nh·∫≠p.'


class CTVAdmin(admin.ModelAdmin):
    list_display = ('id', 'code', 'full_name', 'phone', 'email', 'level', 'total_revenue', 'is_active', 'joined_at')
    list_filter = ('is_active', 'level')
    search_fields = ('code', 'full_name', 'phone', 'email')
    readonly_fields = ('joined_at',)
    form = CTVAdminForm
    fieldsets = (
        ('Th√¥ng tin C·ªông t√°c vi√™n', {'fields': ('code', 'full_name', 'phone', 'email', 'is_active', 'level')}),
        ('Th√¥ng tin li√™n h·ªá', {'fields': ('address',)}),
        ('T√†i kho·∫£n nh·∫≠n hoa h·ªìng', {'fields': ('bank_name', 'bank_number', 'bank_holder')}),
        ('X√°c minh danh t√≠nh', {'fields': ('cccd_front_url', 'cccd_back_url')}),
        ('Ch·ªâ s·ªë kinh doanh', {'fields': ('total_revenue',)}),
        ('T√†i kho·∫£n ƒëƒÉng nh·∫≠p', {'fields': ('password_text',)}),
        ('Kh√°c', {'fields': ('joined_at',)}),
    )

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        # N·∫øu admin nh·∫≠p m·∫≠t kh·∫©u, t·∫°o/c·∫≠p nh·∫≠t t√†i kho·∫£n User ƒëƒÉng nh·∫≠p b·∫±ng SƒêT
        pwd = obj.password_text
        # L·∫•y m·∫≠t kh·∫©u c≈© ƒë·ªÉ so s√°nh
        old_password_text = obj.password_text if change else ''

        # Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi
        if pwd:
            try:
                # T√¨m ho·∫∑c t·∫°o User theo s·ªë ƒëi·ªán tho·∫°i
                user = User.objects.filter(phone_number=obj.phone).first()
                if not user:
                    user = User.objects.create_user(
                        phone_number=obj.phone,
                        email=obj.email or None,
                        password=pwd,
                        is_google_user=False,
                        name=obj.full_name,
                        is_active=True,
                    )
                    messages.success(request, f"‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p cho CTV {obj.code} b·∫±ng SƒêT {obj.phone}.")
                else:
                    user.name = user.name or obj.full_name
                    if obj.email and not user.email:
                        user.email = obj.email
                    user.is_active = True
                    user.set_password(pwd)
                    user.save()
                    messages.success(request, f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho CTV {obj.code} (SƒêT: {obj.phone}).")
            except Exception as e:
                messages.error(request, f"‚ùå Kh√¥ng th·ªÉ t·∫°o/c·∫≠p nh·∫≠t t√†i kho·∫£n ƒëƒÉng nh·∫≠p: {e}")
        else:
            # Ki·ªÉm tra xem CTV ƒë√£ c√≥ t√†i kho·∫£n ƒëƒÉng nh·∫≠p ch∆∞a
            try:
                user = User.objects.get(phone_number=obj.phone)
                if user.has_usable_password():
                    messages.info(request, f"‚ÑπÔ∏è CTV {obj.code} ƒë√£ c√≥ t√†i kho·∫£n ƒëƒÉng nh·∫≠p (SƒêT: {obj.phone}).")
                else:
                    messages.warning(request, f"‚ö†Ô∏è CTV {obj.code} ch∆∞a c√≥ m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p. Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ thi·∫øt l·∫≠p.")
            except User.DoesNotExist:
                messages.warning(request, f"‚ö†Ô∏è CTV {obj.code} ch∆∞a c√≥ t√†i kho·∫£n ƒëƒÉng nh·∫≠p. Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ t·∫°o.")


class CTVWalletAdmin(admin.ModelAdmin):
    list_display = ('ctv', 'balance', 'pending', 'updated_at')
    search_fields = ('ctv__code', 'ctv__full_name', 'ctv__phone')
    readonly_fields = ('updated_at',)


class CTVWithdrawalAdmin(admin.ModelAdmin):
    list_display = ('id', 'ctv', 'amount', 'status', 'requested_at', 'processed_at', 'note')
    list_filter = ('status', 'requested_at')
    search_fields = ('ctv__code', 'ctv__full_name', 'ctv__phone')
    readonly_fields = ('requested_at',)
    list_editable = ('status', 'note')
    actions = ['approve_withdrawals', 'reject_withdrawals']

    def approve_withdrawals(self, request, queryset):
        """Duy·ªát c√°c y√™u c·∫ßu r√∫t ti·ªÅn ƒë∆∞·ª£c ch·ªçn"""
        from django.utils import timezone
        updated = 0
        for withdrawal in queryset.filter(status='pending'):
            withdrawal.status = 'approved'
            withdrawal.processed_at = timezone.now()
            withdrawal.save()

            # C·∫≠p nh·∫≠t v√≠ CTV: chuy·ªÉn t·ª´ pending sang withdrawn
            wallet = withdrawal.ctv.wallet
            wallet.pending = float(wallet.pending) - float(withdrawal.amount)
            wallet.save()
            updated += 1

        self.message_user(request, f'ƒê√£ duy·ªát {updated} y√™u c·∫ßu r√∫t ti·ªÅn.')
    approve_withdrawals.short_description = "Duy·ªát c√°c y√™u c·∫ßu r√∫t ti·ªÅn ƒë∆∞·ª£c ch·ªçn"

    def reject_withdrawals(self, request, queryset):
        """T·ª´ ch·ªëi c√°c y√™u c·∫ßu r√∫t ti·ªÅn ƒë∆∞·ª£c ch·ªçn"""
        from django.utils import timezone
        updated = 0
        for withdrawal in queryset.filter(status='pending'):
            withdrawal.status = 'rejected'
            withdrawal.processed_at = timezone.now()
            withdrawal.save()

            # Ho√†n l·∫°i ti·ªÅn v√†o v√≠ CTV: chuy·ªÉn t·ª´ pending v·ªÅ balance
            wallet = withdrawal.ctv.wallet
            wallet.pending = float(wallet.pending) - float(withdrawal.amount)
            wallet.balance = float(wallet.balance) + float(withdrawal.amount)
            wallet.save()
            updated += 1

        self.message_user(request, f'ƒê√£ t·ª´ ch·ªëi {updated} y√™u c·∫ßu r√∫t ti·ªÅn.')
    reject_withdrawals.short_description = "T·ª´ ch·ªëi c√°c y√™u c·∫ßu r√∫t ti·ªÅn ƒë∆∞·ª£c ch·ªçn"


admin_site.register(CTVLevel, CTVLevelAdmin)
admin_site.register(CTVApplication, CTVApplicationAdmin)
admin_site.register(CTV, CTVAdmin)
admin_site.register(CTVWallet, CTVWalletAdmin)
admin_site.register(CTVWithdrawal, CTVWithdrawalAdmin)

# CustomerLead admin
from .models import CustomerLead

class CustomerLeadAdmin(admin.ModelAdmin):
    list_display = ('name', 'phone', 'email', 'address', 'updated_at')
    search_fields = ('name', 'phone', 'email', 'address')
    list_filter = ('updated_at',)
    readonly_fields = ('created_at', 'updated_at')

admin_site.register(CustomerLead, CustomerLeadAdmin)

# Cart Admin
class CartAdmin(admin.ModelAdmin):
    list_display = ('id', 'user')
    search_fields = ('user__name', 'user__email', 'user__phone_number')

class CartItemAdmin(admin.ModelAdmin):
    list_display = ('id', 'cart', 'product', 'quantity')
    search_fields = ('cart__user__name', 'product__name')

class LuckyPrizeAdmin(admin.ModelAdmin):
    list_display = ('id', 'event', 'name', 'value', 'order')
    search_fields = ('name', 'event__title')
    list_filter = ('event',)
    ordering = ('event', 'order', 'id')

class MarketingResourceAdmin(admin.ModelAdmin):
    list_display = ('name', 'resource_type', 'file_url', 'download_count', 'is_active', 'created_at')
    list_filter = ('resource_type', 'is_active', 'created_at')
    search_fields = ('name', 'description')
    list_editable = ('is_active',)
    readonly_fields = ('download_count', 'created_at', 'updated_at')
    fieldsets = (
        ('Th√¥ng tin c∆° b·∫£n', {
            'fields': ('name', 'description', 'resource_type', 'is_active')
        }),
        ('File', {
            'fields': ('file_url', 'thumbnail_url', 'file_size')
        }),
        ('Li√™n k·∫øt', {
            'fields': ('product',),
            'classes': ('collapse',)
        }),
        ('Th·ªëng k√™', {
            'fields': ('download_count', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


# ƒêƒÉng k√Ω c√°c model c√≤n thi·∫øu
admin_site.register(Cart, CartAdmin)
admin_site.register(CartItem, CartItemAdmin)
admin_site.register(LuckyPrize, LuckyPrizeAdmin)
admin_site.register(MarketingResource, MarketingResourceAdmin)

